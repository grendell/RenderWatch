android.support.v8.renderscript.Allocation -> android.support.v8.renderscript.Allocation:
    android.support.v8.renderscript.Type mType -> mType
    android.graphics.Bitmap mBitmap -> mBitmap
    int mUsage -> mUsage
    android.support.v8.renderscript.Allocation mAdaptedAllocation -> mAdaptedAllocation
    int mSize -> mSize
    boolean mConstrainedLOD -> mConstrainedLOD
    boolean mConstrainedFace -> mConstrainedFace
    boolean mConstrainedY -> mConstrainedY
    boolean mConstrainedZ -> mConstrainedZ
    boolean mReadAllowed -> mReadAllowed
    boolean mWriteAllowed -> mWriteAllowed
    int mSelectedY -> mSelectedY
    int mSelectedZ -> mSelectedZ
    int mSelectedLOD -> mSelectedLOD
    android.support.v8.renderscript.Type$CubemapFace mSelectedFace -> mSelectedFace
    int mCurrentDimX -> mCurrentDimX
    int mCurrentDimY -> mCurrentDimY
    int mCurrentDimZ -> mCurrentDimZ
    int mCurrentCount -> mCurrentCount
    int USAGE_SCRIPT -> USAGE_SCRIPT
    int USAGE_GRAPHICS_TEXTURE -> USAGE_GRAPHICS_TEXTURE
    int USAGE_IO_INPUT -> USAGE_IO_INPUT
    int USAGE_IO_OUTPUT -> USAGE_IO_OUTPUT
    int USAGE_SHARED -> USAGE_SHARED
    android.graphics.BitmapFactory$Options mBitmapOptions -> mBitmapOptions
    int getIDSafe() -> getIDSafe
    android.support.v8.renderscript.Element getElement() -> getElement
    int getUsage() -> getUsage
    int getBytesSize() -> getBytesSize
    void updateCacheInfo(android.support.v8.renderscript.Type) -> updateCacheInfo
    void setBitmap(android.graphics.Bitmap) -> setBitmap
    void finalize() -> finalize
    void validateIsInt32() -> validateIsInt32
    void validateIsInt16() -> validateIsInt16
    void validateIsInt8() -> validateIsInt8
    void validateIsFloat32() -> validateIsFloat32
    void validateIsObject() -> validateIsObject
    android.support.v8.renderscript.Type getType() -> getType
    void syncAll(int) -> syncAll
    void ioSend() -> ioSend
    void ioSendOutput() -> ioSendOutput
    void ioReceive() -> ioReceive
    void copyFrom(android.support.v8.renderscript.BaseObj[]) -> copyFrom
    void validateBitmapFormat(android.graphics.Bitmap) -> validateBitmapFormat
    void validateBitmapSize(android.graphics.Bitmap) -> validateBitmapSize
    void copyFromUnchecked(int[]) -> copyFromUnchecked
    void copyFromUnchecked(short[]) -> copyFromUnchecked
    void copyFromUnchecked(byte[]) -> copyFromUnchecked
    void copyFromUnchecked(float[]) -> copyFromUnchecked
    void copyFrom(int[]) -> copyFrom
    void copyFrom(short[]) -> copyFrom
    void copyFrom(byte[]) -> copyFrom
    void copyFrom(float[]) -> copyFrom
    void copyFrom(android.graphics.Bitmap) -> copyFrom
    void copyFrom(android.support.v8.renderscript.Allocation) -> copyFrom
    void setFromFieldPacker(int,android.support.v8.renderscript.FieldPacker) -> setFromFieldPacker
    void setFromFieldPacker(int,int,android.support.v8.renderscript.FieldPacker) -> setFromFieldPacker
    void data1DChecks(int,int,int,int) -> data1DChecks
    void generateMipmaps() -> generateMipmaps
    void copy1DRangeFromUnchecked(int,int,int[]) -> copy1DRangeFromUnchecked
    void copy1DRangeFromUnchecked(int,int,short[]) -> copy1DRangeFromUnchecked
    void copy1DRangeFromUnchecked(int,int,byte[]) -> copy1DRangeFromUnchecked
    void copy1DRangeFromUnchecked(int,int,float[]) -> copy1DRangeFromUnchecked
    void copy1DRangeFrom(int,int,int[]) -> copy1DRangeFrom
    void copy1DRangeFrom(int,int,short[]) -> copy1DRangeFrom
    void copy1DRangeFrom(int,int,byte[]) -> copy1DRangeFrom
    void copy1DRangeFrom(int,int,float[]) -> copy1DRangeFrom
    void copy1DRangeFrom(int,int,android.support.v8.renderscript.Allocation,int) -> copy1DRangeFrom
    void validate2DRange(int,int,int,int) -> validate2DRange
    void copy2DRangeFromUnchecked(int,int,int,int,byte[]) -> copy2DRangeFromUnchecked
    void copy2DRangeFromUnchecked(int,int,int,int,short[]) -> copy2DRangeFromUnchecked
    void copy2DRangeFromUnchecked(int,int,int,int,int[]) -> copy2DRangeFromUnchecked
    void copy2DRangeFromUnchecked(int,int,int,int,float[]) -> copy2DRangeFromUnchecked
    void copy2DRangeFrom(int,int,int,int,byte[]) -> copy2DRangeFrom
    void copy2DRangeFrom(int,int,int,int,short[]) -> copy2DRangeFrom
    void copy2DRangeFrom(int,int,int,int,int[]) -> copy2DRangeFrom
    void copy2DRangeFrom(int,int,int,int,float[]) -> copy2DRangeFrom
    void copy2DRangeFrom(int,int,int,int,android.support.v8.renderscript.Allocation,int,int) -> copy2DRangeFrom
    void copy2DRangeFrom(int,int,android.graphics.Bitmap) -> copy2DRangeFrom
    void validate3DRange(int,int,int,int,int,int) -> validate3DRange
    void copy3DRangeFromUnchecked(int,int,int,int,int,int,byte[]) -> copy3DRangeFromUnchecked
    void copy3DRangeFromUnchecked(int,int,int,int,int,int,short[]) -> copy3DRangeFromUnchecked
    void copy3DRangeFromUnchecked(int,int,int,int,int,int,int[]) -> copy3DRangeFromUnchecked
    void copy3DRangeFromUnchecked(int,int,int,int,int,int,float[]) -> copy3DRangeFromUnchecked
    void copy3DRangeFrom(int,int,int,int,int,int,byte[]) -> copy3DRangeFrom
    void copy3DRangeFrom(int,int,int,int,int,int,short[]) -> copy3DRangeFrom
    void copy3DRangeFrom(int,int,int,int,int,int,int[]) -> copy3DRangeFrom
    void copy3DRangeFrom(int,int,int,int,int,int,float[]) -> copy3DRangeFrom
    void copy3DRangeFrom(int,int,int,int,int,int,android.support.v8.renderscript.Allocation,int,int,int) -> copy3DRangeFrom
    void copyTo(android.graphics.Bitmap) -> copyTo
    void copyTo(byte[]) -> copyTo
    void copyTo(short[]) -> copyTo
    void copyTo(int[]) -> copyTo
    void copyTo(float[]) -> copyTo
    android.support.v8.renderscript.Allocation createTyped(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Type,android.support.v8.renderscript.Allocation$MipmapControl,int) -> createTyped
    android.support.v8.renderscript.Allocation createTyped(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Type,int) -> createTyped
    android.support.v8.renderscript.Allocation createTyped(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Type) -> createTyped
    android.support.v8.renderscript.Allocation createSized(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element,int,int) -> createSized
    android.support.v8.renderscript.Allocation createSized(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element,int) -> createSized
    android.support.v8.renderscript.Element elementFromBitmap(android.support.v8.renderscript.RenderScript,android.graphics.Bitmap) -> elementFromBitmap
    android.support.v8.renderscript.Type typeFromBitmap(android.support.v8.renderscript.RenderScript,android.graphics.Bitmap,android.support.v8.renderscript.Allocation$MipmapControl) -> typeFromBitmap
    android.support.v8.renderscript.Allocation createFromBitmap(android.support.v8.renderscript.RenderScript,android.graphics.Bitmap,android.support.v8.renderscript.Allocation$MipmapControl,int) -> createFromBitmap
    android.support.v8.renderscript.Allocation createFromBitmap(android.support.v8.renderscript.RenderScript,android.graphics.Bitmap) -> createFromBitmap
    android.support.v8.renderscript.Allocation createCubemapFromBitmap(android.support.v8.renderscript.RenderScript,android.graphics.Bitmap,android.support.v8.renderscript.Allocation$MipmapControl,int) -> createCubemapFromBitmap
    android.support.v8.renderscript.Allocation createCubemapFromBitmap(android.support.v8.renderscript.RenderScript,android.graphics.Bitmap) -> createCubemapFromBitmap
    android.support.v8.renderscript.Allocation createCubemapFromCubeFaces(android.support.v8.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.support.v8.renderscript.Allocation$MipmapControl,int) -> createCubemapFromCubeFaces
    android.support.v8.renderscript.Allocation createCubemapFromCubeFaces(android.support.v8.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap) -> createCubemapFromCubeFaces
    android.support.v8.renderscript.Allocation createFromBitmapResource(android.support.v8.renderscript.RenderScript,android.content.res.Resources,int,android.support.v8.renderscript.Allocation$MipmapControl,int) -> createFromBitmapResource
    android.support.v8.renderscript.Allocation createFromBitmapResource(android.support.v8.renderscript.RenderScript,android.content.res.Resources,int) -> createFromBitmapResource
    android.support.v8.renderscript.Allocation createFromString(android.support.v8.renderscript.RenderScript,java.lang.String,int) -> createFromString
android.support.v8.renderscript.Allocation$1 -> android.support.v8.renderscript.Allocation$1:
    int[] $SwitchMap$android$graphics$Bitmap$Config -> $SwitchMap$android$graphics$Bitmap$Config
android.support.v8.renderscript.Allocation$MipmapControl -> android.support.v8.renderscript.Allocation$MipmapControl:
    android.support.v8.renderscript.Allocation$MipmapControl MIPMAP_NONE -> MIPMAP_NONE
    android.support.v8.renderscript.Allocation$MipmapControl MIPMAP_FULL -> MIPMAP_FULL
    android.support.v8.renderscript.Allocation$MipmapControl MIPMAP_ON_SYNC_TO_TEXTURE -> MIPMAP_ON_SYNC_TO_TEXTURE
    int mID -> mID
    android.support.v8.renderscript.Allocation$MipmapControl[] $VALUES -> $VALUES
    android.support.v8.renderscript.Allocation$MipmapControl[] values() -> values
    android.support.v8.renderscript.Allocation$MipmapControl valueOf(java.lang.String) -> valueOf
android.support.v8.renderscript.AllocationThunker -> android.support.v8.renderscript.AllocationThunker:
    android.renderscript.Allocation mN -> mN
    android.graphics.BitmapFactory$Options mBitmapOptions -> mBitmapOptions
    android.renderscript.Allocation getNObj() -> getNObj
    android.renderscript.Allocation$MipmapControl convertMipmapControl(android.support.v8.renderscript.Allocation$MipmapControl) -> convertMipmapControl
    android.support.v8.renderscript.Type getType() -> getType
    android.support.v8.renderscript.Element getElement() -> getElement
    int getUsage() -> getUsage
    int getBytesSize() -> getBytesSize
    void syncAll(int) -> syncAll
    void ioSend() -> ioSend
    void ioReceive() -> ioReceive
    void copyFrom(android.support.v8.renderscript.BaseObj[]) -> copyFrom
    void copyFromUnchecked(int[]) -> copyFromUnchecked
    void copyFromUnchecked(short[]) -> copyFromUnchecked
    void copyFromUnchecked(byte[]) -> copyFromUnchecked
    void copyFromUnchecked(float[]) -> copyFromUnchecked
    void copyFrom(int[]) -> copyFrom
    void copyFrom(short[]) -> copyFrom
    void copyFrom(byte[]) -> copyFrom
    void copyFrom(float[]) -> copyFrom
    void copyFrom(android.graphics.Bitmap) -> copyFrom
    void copyFrom(android.support.v8.renderscript.Allocation) -> copyFrom
    void setFromFieldPacker(int,android.support.v8.renderscript.FieldPacker) -> setFromFieldPacker
    void setFromFieldPacker(int,int,android.support.v8.renderscript.FieldPacker) -> setFromFieldPacker
    void generateMipmaps() -> generateMipmaps
    void copy1DRangeFromUnchecked(int,int,int[]) -> copy1DRangeFromUnchecked
    void copy1DRangeFromUnchecked(int,int,short[]) -> copy1DRangeFromUnchecked
    void copy1DRangeFromUnchecked(int,int,byte[]) -> copy1DRangeFromUnchecked
    void copy1DRangeFromUnchecked(int,int,float[]) -> copy1DRangeFromUnchecked
    void copy1DRangeFrom(int,int,int[]) -> copy1DRangeFrom
    void copy1DRangeFrom(int,int,short[]) -> copy1DRangeFrom
    void copy1DRangeFrom(int,int,byte[]) -> copy1DRangeFrom
    void copy1DRangeFrom(int,int,float[]) -> copy1DRangeFrom
    void copy1DRangeFrom(int,int,android.support.v8.renderscript.Allocation,int) -> copy1DRangeFrom
    void copy2DRangeFrom(int,int,int,int,byte[]) -> copy2DRangeFrom
    void copy2DRangeFrom(int,int,int,int,short[]) -> copy2DRangeFrom
    void copy2DRangeFrom(int,int,int,int,int[]) -> copy2DRangeFrom
    void copy2DRangeFrom(int,int,int,int,float[]) -> copy2DRangeFrom
    void copy2DRangeFrom(int,int,int,int,android.support.v8.renderscript.Allocation,int,int) -> copy2DRangeFrom
    void copy2DRangeFrom(int,int,android.graphics.Bitmap) -> copy2DRangeFrom
    void copyTo(android.graphics.Bitmap) -> copyTo
    void copyTo(byte[]) -> copyTo
    void copyTo(short[]) -> copyTo
    void copyTo(int[]) -> copyTo
    void copyTo(float[]) -> copyTo
    android.support.v8.renderscript.Allocation createTyped(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Type,android.support.v8.renderscript.Allocation$MipmapControl,int) -> createTyped
    android.support.v8.renderscript.Allocation createFromBitmap(android.support.v8.renderscript.RenderScript,android.graphics.Bitmap,android.support.v8.renderscript.Allocation$MipmapControl,int) -> createFromBitmap
    android.support.v8.renderscript.Allocation createCubemapFromBitmap(android.support.v8.renderscript.RenderScript,android.graphics.Bitmap,android.support.v8.renderscript.Allocation$MipmapControl,int) -> createCubemapFromBitmap
    android.support.v8.renderscript.Allocation createCubemapFromCubeFaces(android.support.v8.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.support.v8.renderscript.Allocation$MipmapControl,int) -> createCubemapFromCubeFaces
    android.support.v8.renderscript.Allocation createFromBitmapResource(android.support.v8.renderscript.RenderScript,android.content.res.Resources,int,android.support.v8.renderscript.Allocation$MipmapControl,int) -> createFromBitmapResource
    android.support.v8.renderscript.Allocation createFromString(android.support.v8.renderscript.RenderScript,java.lang.String,int) -> createFromString
    android.support.v8.renderscript.Allocation createSized(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element,int,int) -> createSized
    android.renderscript.BaseObj getNObj() -> getNObj
android.support.v8.renderscript.AllocationThunker$1 -> android.support.v8.renderscript.AllocationThunker$1:
    int[] $SwitchMap$android$support$v8$renderscript$Allocation$MipmapControl -> $SwitchMap$android$support$v8$renderscript$Allocation$MipmapControl
android.support.v8.renderscript.BaseObj -> android.support.v8.renderscript.BaseObj:
    int mID -> mID
    boolean mDestroyed -> mDestroyed
    android.support.v8.renderscript.RenderScript mRS -> mRS
    void setID(int) -> setID
    int getID(android.support.v8.renderscript.RenderScript) -> getID
    android.renderscript.BaseObj getNObj() -> getNObj
    void checkValid() -> checkValid
    void finalize() -> finalize
    void destroy() -> destroy
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
android.support.v8.renderscript.Byte2 -> android.support.v8.renderscript.Byte2:
    byte x -> x
    byte y -> y
android.support.v8.renderscript.Byte3 -> android.support.v8.renderscript.Byte3:
    byte x -> x
    byte y -> y
    byte z -> z
android.support.v8.renderscript.Byte4 -> android.support.v8.renderscript.Byte4:
    byte x -> x
    byte y -> y
    byte z -> z
    byte w -> w
android.support.v8.renderscript.Double2 -> android.support.v8.renderscript.Double2:
    double x -> x
    double y -> y
android.support.v8.renderscript.Double3 -> android.support.v8.renderscript.Double3:
    double x -> x
    double y -> y
    double z -> z
android.support.v8.renderscript.Double4 -> android.support.v8.renderscript.Double4:
    double x -> x
    double y -> y
    double z -> z
    double w -> w
android.support.v8.renderscript.Element -> android.support.v8.renderscript.Element:
    int mSize -> mSize
    android.support.v8.renderscript.Element[] mElements -> mElements
    java.lang.String[] mElementNames -> mElementNames
    int[] mArraySizes -> mArraySizes
    int[] mOffsetInBytes -> mOffsetInBytes
    int[] mVisibleElementMap -> mVisibleElementMap
    android.support.v8.renderscript.Element$DataType mType -> mType
    android.support.v8.renderscript.Element$DataKind mKind -> mKind
    boolean mNormalized -> mNormalized
    int mVectorSize -> mVectorSize
    void updateVisibleSubElements() -> updateVisibleSubElements
    int getBytesSize() -> getBytesSize
    int getVectorSize() -> getVectorSize
    boolean isComplex() -> isComplex
    int getSubElementCount() -> getSubElementCount
    android.support.v8.renderscript.Element getSubElement(int) -> getSubElement
    java.lang.String getSubElementName(int) -> getSubElementName
    int getSubElementArraySize(int) -> getSubElementArraySize
    int getSubElementOffsetBytes(int) -> getSubElementOffsetBytes
    android.support.v8.renderscript.Element$DataType getDataType() -> getDataType
    android.support.v8.renderscript.Element$DataKind getDataKind() -> getDataKind
    android.support.v8.renderscript.Element BOOLEAN(android.support.v8.renderscript.RenderScript) -> BOOLEAN
    android.support.v8.renderscript.Element U8(android.support.v8.renderscript.RenderScript) -> U8
    android.support.v8.renderscript.Element I8(android.support.v8.renderscript.RenderScript) -> I8
    android.support.v8.renderscript.Element U16(android.support.v8.renderscript.RenderScript) -> U16
    android.support.v8.renderscript.Element I16(android.support.v8.renderscript.RenderScript) -> I16
    android.support.v8.renderscript.Element U32(android.support.v8.renderscript.RenderScript) -> U32
    android.support.v8.renderscript.Element I32(android.support.v8.renderscript.RenderScript) -> I32
    android.support.v8.renderscript.Element U64(android.support.v8.renderscript.RenderScript) -> U64
    android.support.v8.renderscript.Element I64(android.support.v8.renderscript.RenderScript) -> I64
    android.support.v8.renderscript.Element F32(android.support.v8.renderscript.RenderScript) -> F32
    android.support.v8.renderscript.Element F64(android.support.v8.renderscript.RenderScript) -> F64
    android.support.v8.renderscript.Element ELEMENT(android.support.v8.renderscript.RenderScript) -> ELEMENT
    android.support.v8.renderscript.Element TYPE(android.support.v8.renderscript.RenderScript) -> TYPE
    android.support.v8.renderscript.Element ALLOCATION(android.support.v8.renderscript.RenderScript) -> ALLOCATION
    android.support.v8.renderscript.Element SAMPLER(android.support.v8.renderscript.RenderScript) -> SAMPLER
    android.support.v8.renderscript.Element SCRIPT(android.support.v8.renderscript.RenderScript) -> SCRIPT
    android.support.v8.renderscript.Element A_8(android.support.v8.renderscript.RenderScript) -> A_8
    android.support.v8.renderscript.Element RGB_565(android.support.v8.renderscript.RenderScript) -> RGB_565
    android.support.v8.renderscript.Element RGB_888(android.support.v8.renderscript.RenderScript) -> RGB_888
    android.support.v8.renderscript.Element RGBA_5551(android.support.v8.renderscript.RenderScript) -> RGBA_5551
    android.support.v8.renderscript.Element RGBA_4444(android.support.v8.renderscript.RenderScript) -> RGBA_4444
    android.support.v8.renderscript.Element RGBA_8888(android.support.v8.renderscript.RenderScript) -> RGBA_8888
    android.support.v8.renderscript.Element F32_2(android.support.v8.renderscript.RenderScript) -> F32_2
    android.support.v8.renderscript.Element F32_3(android.support.v8.renderscript.RenderScript) -> F32_3
    android.support.v8.renderscript.Element F32_4(android.support.v8.renderscript.RenderScript) -> F32_4
    android.support.v8.renderscript.Element F64_2(android.support.v8.renderscript.RenderScript) -> F64_2
    android.support.v8.renderscript.Element F64_3(android.support.v8.renderscript.RenderScript) -> F64_3
    android.support.v8.renderscript.Element F64_4(android.support.v8.renderscript.RenderScript) -> F64_4
    android.support.v8.renderscript.Element U8_2(android.support.v8.renderscript.RenderScript) -> U8_2
    android.support.v8.renderscript.Element U8_3(android.support.v8.renderscript.RenderScript) -> U8_3
    android.support.v8.renderscript.Element U8_4(android.support.v8.renderscript.RenderScript) -> U8_4
    android.support.v8.renderscript.Element I8_2(android.support.v8.renderscript.RenderScript) -> I8_2
    android.support.v8.renderscript.Element I8_3(android.support.v8.renderscript.RenderScript) -> I8_3
    android.support.v8.renderscript.Element I8_4(android.support.v8.renderscript.RenderScript) -> I8_4
    android.support.v8.renderscript.Element U16_2(android.support.v8.renderscript.RenderScript) -> U16_2
    android.support.v8.renderscript.Element U16_3(android.support.v8.renderscript.RenderScript) -> U16_3
    android.support.v8.renderscript.Element U16_4(android.support.v8.renderscript.RenderScript) -> U16_4
    android.support.v8.renderscript.Element I16_2(android.support.v8.renderscript.RenderScript) -> I16_2
    android.support.v8.renderscript.Element I16_3(android.support.v8.renderscript.RenderScript) -> I16_3
    android.support.v8.renderscript.Element I16_4(android.support.v8.renderscript.RenderScript) -> I16_4
    android.support.v8.renderscript.Element U32_2(android.support.v8.renderscript.RenderScript) -> U32_2
    android.support.v8.renderscript.Element U32_3(android.support.v8.renderscript.RenderScript) -> U32_3
    android.support.v8.renderscript.Element U32_4(android.support.v8.renderscript.RenderScript) -> U32_4
    android.support.v8.renderscript.Element I32_2(android.support.v8.renderscript.RenderScript) -> I32_2
    android.support.v8.renderscript.Element I32_3(android.support.v8.renderscript.RenderScript) -> I32_3
    android.support.v8.renderscript.Element I32_4(android.support.v8.renderscript.RenderScript) -> I32_4
    android.support.v8.renderscript.Element U64_2(android.support.v8.renderscript.RenderScript) -> U64_2
    android.support.v8.renderscript.Element U64_3(android.support.v8.renderscript.RenderScript) -> U64_3
    android.support.v8.renderscript.Element U64_4(android.support.v8.renderscript.RenderScript) -> U64_4
    android.support.v8.renderscript.Element I64_2(android.support.v8.renderscript.RenderScript) -> I64_2
    android.support.v8.renderscript.Element I64_3(android.support.v8.renderscript.RenderScript) -> I64_3
    android.support.v8.renderscript.Element I64_4(android.support.v8.renderscript.RenderScript) -> I64_4
    android.support.v8.renderscript.Element MATRIX_4X4(android.support.v8.renderscript.RenderScript) -> MATRIX_4X4
    android.support.v8.renderscript.Element MATRIX_3X3(android.support.v8.renderscript.RenderScript) -> MATRIX_3X3
    android.support.v8.renderscript.Element MATRIX_2X2(android.support.v8.renderscript.RenderScript) -> MATRIX_2X2
    android.support.v8.renderscript.Element createUser(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element$DataType) -> createUser
    android.support.v8.renderscript.Element createVector(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element$DataType,int) -> createVector
    android.support.v8.renderscript.Element createPixel(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element$DataType,android.support.v8.renderscript.Element$DataKind) -> createPixel
    boolean isCompatible(android.support.v8.renderscript.Element) -> isCompatible
android.support.v8.renderscript.Element$1 -> android.support.v8.renderscript.Element$1:
    int[] $SwitchMap$android$support$v8$renderscript$Element$DataType -> $SwitchMap$android$support$v8$renderscript$Element$DataType
    int[] $SwitchMap$android$support$v8$renderscript$Element$DataKind -> $SwitchMap$android$support$v8$renderscript$Element$DataKind
android.support.v8.renderscript.Element$Builder -> android.support.v8.renderscript.Element$Builder:
    android.support.v8.renderscript.ElementThunker$BuilderThunker mT -> mT
    android.support.v8.renderscript.RenderScript mRS -> mRS
    android.support.v8.renderscript.Element[] mElements -> mElements
    java.lang.String[] mElementNames -> mElementNames
    int[] mArraySizes -> mArraySizes
    int mCount -> mCount
    int mSkipPadding -> mSkipPadding
    android.support.v8.renderscript.Element$Builder add(android.support.v8.renderscript.Element,java.lang.String,int) -> add
    android.support.v8.renderscript.Element$Builder add(android.support.v8.renderscript.Element,java.lang.String) -> add
    android.support.v8.renderscript.Element create() -> create
android.support.v8.renderscript.Element$DataKind -> android.support.v8.renderscript.Element$DataKind:
    android.support.v8.renderscript.Element$DataKind USER -> USER
    android.support.v8.renderscript.Element$DataKind PIXEL_L -> PIXEL_L
    android.support.v8.renderscript.Element$DataKind PIXEL_A -> PIXEL_A
    android.support.v8.renderscript.Element$DataKind PIXEL_LA -> PIXEL_LA
    android.support.v8.renderscript.Element$DataKind PIXEL_RGB -> PIXEL_RGB
    android.support.v8.renderscript.Element$DataKind PIXEL_RGBA -> PIXEL_RGBA
    android.support.v8.renderscript.Element$DataKind PIXEL_DEPTH -> PIXEL_DEPTH
    android.support.v8.renderscript.Element$DataKind PIXEL_YUV -> PIXEL_YUV
    int mID -> mID
    android.support.v8.renderscript.Element$DataKind[] $VALUES -> $VALUES
    android.support.v8.renderscript.Element$DataKind[] values() -> values
    android.support.v8.renderscript.Element$DataKind valueOf(java.lang.String) -> valueOf
android.support.v8.renderscript.Element$DataType -> android.support.v8.renderscript.Element$DataType:
    android.support.v8.renderscript.Element$DataType NONE -> NONE
    android.support.v8.renderscript.Element$DataType FLOAT_32 -> FLOAT_32
    android.support.v8.renderscript.Element$DataType FLOAT_64 -> FLOAT_64
    android.support.v8.renderscript.Element$DataType SIGNED_8 -> SIGNED_8
    android.support.v8.renderscript.Element$DataType SIGNED_16 -> SIGNED_16
    android.support.v8.renderscript.Element$DataType SIGNED_32 -> SIGNED_32
    android.support.v8.renderscript.Element$DataType SIGNED_64 -> SIGNED_64
    android.support.v8.renderscript.Element$DataType UNSIGNED_8 -> UNSIGNED_8
    android.support.v8.renderscript.Element$DataType UNSIGNED_16 -> UNSIGNED_16
    android.support.v8.renderscript.Element$DataType UNSIGNED_32 -> UNSIGNED_32
    android.support.v8.renderscript.Element$DataType UNSIGNED_64 -> UNSIGNED_64
    android.support.v8.renderscript.Element$DataType BOOLEAN -> BOOLEAN
    android.support.v8.renderscript.Element$DataType UNSIGNED_5_6_5 -> UNSIGNED_5_6_5
    android.support.v8.renderscript.Element$DataType UNSIGNED_5_5_5_1 -> UNSIGNED_5_5_5_1
    android.support.v8.renderscript.Element$DataType UNSIGNED_4_4_4_4 -> UNSIGNED_4_4_4_4
    android.support.v8.renderscript.Element$DataType MATRIX_4X4 -> MATRIX_4X4
    android.support.v8.renderscript.Element$DataType MATRIX_3X3 -> MATRIX_3X3
    android.support.v8.renderscript.Element$DataType MATRIX_2X2 -> MATRIX_2X2
    android.support.v8.renderscript.Element$DataType RS_ELEMENT -> RS_ELEMENT
    android.support.v8.renderscript.Element$DataType RS_TYPE -> RS_TYPE
    android.support.v8.renderscript.Element$DataType RS_ALLOCATION -> RS_ALLOCATION
    android.support.v8.renderscript.Element$DataType RS_SAMPLER -> RS_SAMPLER
    android.support.v8.renderscript.Element$DataType RS_SCRIPT -> RS_SCRIPT
    int mID -> mID
    int mSize -> mSize
    android.support.v8.renderscript.Element$DataType[] $VALUES -> $VALUES
    android.support.v8.renderscript.Element$DataType[] values() -> values
    android.support.v8.renderscript.Element$DataType valueOf(java.lang.String) -> valueOf
android.support.v8.renderscript.ElementThunker -> android.support.v8.renderscript.ElementThunker:
    android.renderscript.Element mN -> mN
    android.renderscript.Element getNObj() -> getNObj
    int getBytesSize() -> getBytesSize
    int getVectorSize() -> getVectorSize
    android.renderscript.Element$DataKind convertKind(android.support.v8.renderscript.Element$DataKind) -> convertKind
    android.renderscript.Element$DataType convertType(android.support.v8.renderscript.Element$DataType) -> convertType
    boolean isComplex() -> isComplex
    int getSubElementCount() -> getSubElementCount
    android.support.v8.renderscript.Element getSubElement(int) -> getSubElement
    java.lang.String getSubElementName(int) -> getSubElementName
    int getSubElementArraySize(int) -> getSubElementArraySize
    int getSubElementOffsetBytes(int) -> getSubElementOffsetBytes
    android.support.v8.renderscript.Element$DataType getDataType() -> getDataType
    android.support.v8.renderscript.Element$DataKind getDataKind() -> getDataKind
    android.support.v8.renderscript.Element create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element$DataType) -> create
    android.support.v8.renderscript.Element createVector(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element$DataType,int) -> createVector
    android.support.v8.renderscript.Element createPixel(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element$DataType,android.support.v8.renderscript.Element$DataKind) -> createPixel
    boolean isCompatible(android.support.v8.renderscript.Element) -> isCompatible
    android.renderscript.BaseObj getNObj() -> getNObj
android.support.v8.renderscript.ElementThunker$1 -> android.support.v8.renderscript.ElementThunker$1:
    int[] $SwitchMap$android$support$v8$renderscript$Element$DataKind -> $SwitchMap$android$support$v8$renderscript$Element$DataKind
    int[] $SwitchMap$android$support$v8$renderscript$Element$DataType -> $SwitchMap$android$support$v8$renderscript$Element$DataType
android.support.v8.renderscript.ElementThunker$BuilderThunker -> android.support.v8.renderscript.ElementThunker$BuilderThunker:
    android.renderscript.Element$Builder mN -> mN
    void add(android.support.v8.renderscript.Element,java.lang.String,int) -> add
    android.support.v8.renderscript.Element create(android.support.v8.renderscript.RenderScript) -> create
android.support.v8.renderscript.ExceptionThunker -> android.support.v8.renderscript.ExceptionThunker:
    java.lang.RuntimeException convertException(java.lang.RuntimeException) -> convertException
android.support.v8.renderscript.FieldPacker -> android.support.v8.renderscript.FieldPacker:
    android.renderscript.FieldPacker mN -> mN
    byte[] mData -> mData
    int mPos -> mPos
    int mLen -> mLen
    void align(int) -> align
    void reset() -> reset
    void reset(int) -> reset
    void skip(int) -> skip
    void addI8(byte) -> addI8
    void addI16(short) -> addI16
    void addI32(int) -> addI32
    void addI64(long) -> addI64
    void addU8(short) -> addU8
    void addU16(int) -> addU16
    void addU32(long) -> addU32
    void addU64(long) -> addU64
    void addF32(float) -> addF32
    void addF64(double) -> addF64
    void addObj(android.support.v8.renderscript.BaseObj) -> addObj
    void addF32(android.support.v8.renderscript.Float2) -> addF32
    void addF32(android.support.v8.renderscript.Float3) -> addF32
    void addF32(android.support.v8.renderscript.Float4) -> addF32
    void addF64(android.support.v8.renderscript.Double2) -> addF64
    void addF64(android.support.v8.renderscript.Double3) -> addF64
    void addF64(android.support.v8.renderscript.Double4) -> addF64
    void addI8(android.support.v8.renderscript.Byte2) -> addI8
    void addI8(android.support.v8.renderscript.Byte3) -> addI8
    void addI8(android.support.v8.renderscript.Byte4) -> addI8
    void addU8(android.support.v8.renderscript.Short2) -> addU8
    void addU8(android.support.v8.renderscript.Short3) -> addU8
    void addU8(android.support.v8.renderscript.Short4) -> addU8
    void addI16(android.support.v8.renderscript.Short2) -> addI16
    void addI16(android.support.v8.renderscript.Short3) -> addI16
    void addI16(android.support.v8.renderscript.Short4) -> addI16
    void addU16(android.support.v8.renderscript.Int2) -> addU16
    void addU16(android.support.v8.renderscript.Int3) -> addU16
    void addU16(android.support.v8.renderscript.Int4) -> addU16
    void addI32(android.support.v8.renderscript.Int2) -> addI32
    void addI32(android.support.v8.renderscript.Int3) -> addI32
    void addI32(android.support.v8.renderscript.Int4) -> addI32
    void addU32(android.support.v8.renderscript.Long2) -> addU32
    void addU32(android.support.v8.renderscript.Long3) -> addU32
    void addU32(android.support.v8.renderscript.Long4) -> addU32
    void addI64(android.support.v8.renderscript.Long2) -> addI64
    void addI64(android.support.v8.renderscript.Long3) -> addI64
    void addI64(android.support.v8.renderscript.Long4) -> addI64
    void addU64(android.support.v8.renderscript.Long2) -> addU64
    void addU64(android.support.v8.renderscript.Long3) -> addU64
    void addU64(android.support.v8.renderscript.Long4) -> addU64
    void addMatrix(android.support.v8.renderscript.Matrix4f) -> addMatrix
    void addMatrix(android.support.v8.renderscript.Matrix3f) -> addMatrix
    void addMatrix(android.support.v8.renderscript.Matrix2f) -> addMatrix
    void addBoolean(boolean) -> addBoolean
    byte[] getData() -> getData
android.support.v8.renderscript.Float2 -> android.support.v8.renderscript.Float2:
    float x -> x
    float y -> y
android.support.v8.renderscript.Float3 -> android.support.v8.renderscript.Float3:
    float x -> x
    float y -> y
    float z -> z
android.support.v8.renderscript.Float4 -> android.support.v8.renderscript.Float4:
    float x -> x
    float y -> y
    float z -> z
    float w -> w
android.support.v8.renderscript.Int2 -> android.support.v8.renderscript.Int2:
    int x -> x
    int y -> y
android.support.v8.renderscript.Int3 -> android.support.v8.renderscript.Int3:
    int x -> x
    int y -> y
    int z -> z
android.support.v8.renderscript.Int4 -> android.support.v8.renderscript.Int4:
    int x -> x
    int y -> y
    int z -> z
    int w -> w
android.support.v8.renderscript.Long2 -> android.support.v8.renderscript.Long2:
    long x -> x
    long y -> y
android.support.v8.renderscript.Long3 -> android.support.v8.renderscript.Long3:
    long x -> x
    long y -> y
    long z -> z
android.support.v8.renderscript.Long4 -> android.support.v8.renderscript.Long4:
    long x -> x
    long y -> y
    long z -> z
    long w -> w
android.support.v8.renderscript.Matrix2f -> android.support.v8.renderscript.Matrix2f:
    float[] mMat -> mMat
    float[] getArray() -> getArray
    float get(int,int) -> get
    void set(int,int,float) -> set
    void loadIdentity() -> loadIdentity
    void load(android.support.v8.renderscript.Matrix2f) -> load
    void loadRotate(float) -> loadRotate
    void loadScale(float,float) -> loadScale
    void loadMultiply(android.support.v8.renderscript.Matrix2f,android.support.v8.renderscript.Matrix2f) -> loadMultiply
    void multiply(android.support.v8.renderscript.Matrix2f) -> multiply
    void rotate(float) -> rotate
    void scale(float,float) -> scale
    void transpose() -> transpose
android.support.v8.renderscript.Matrix3f -> android.support.v8.renderscript.Matrix3f:
    float[] mMat -> mMat
    float[] getArray() -> getArray
    float get(int,int) -> get
    void set(int,int,float) -> set
    void loadIdentity() -> loadIdentity
    void load(android.support.v8.renderscript.Matrix3f) -> load
    void loadRotate(float,float,float,float) -> loadRotate
    void loadRotate(float) -> loadRotate
    void loadScale(float,float) -> loadScale
    void loadScale(float,float,float) -> loadScale
    void loadTranslate(float,float) -> loadTranslate
    void loadMultiply(android.support.v8.renderscript.Matrix3f,android.support.v8.renderscript.Matrix3f) -> loadMultiply
    void multiply(android.support.v8.renderscript.Matrix3f) -> multiply
    void rotate(float,float,float,float) -> rotate
    void rotate(float) -> rotate
    void scale(float,float) -> scale
    void scale(float,float,float) -> scale
    void translate(float,float) -> translate
    void transpose() -> transpose
android.support.v8.renderscript.Matrix4f -> android.support.v8.renderscript.Matrix4f:
    float[] mMat -> mMat
    float[] getArray() -> getArray
    float get(int,int) -> get
    void set(int,int,float) -> set
    void loadIdentity() -> loadIdentity
    void load(android.support.v8.renderscript.Matrix4f) -> load
    void load(android.support.v8.renderscript.Matrix3f) -> load
    void loadRotate(float,float,float,float) -> loadRotate
    void loadScale(float,float,float) -> loadScale
    void loadTranslate(float,float,float) -> loadTranslate
    void loadMultiply(android.support.v8.renderscript.Matrix4f,android.support.v8.renderscript.Matrix4f) -> loadMultiply
    void loadOrtho(float,float,float,float,float,float) -> loadOrtho
    void loadOrthoWindow(int,int) -> loadOrthoWindow
    void loadFrustum(float,float,float,float,float,float) -> loadFrustum
    void loadPerspective(float,float,float,float) -> loadPerspective
    void loadProjectionNormalized(int,int) -> loadProjectionNormalized
    void multiply(android.support.v8.renderscript.Matrix4f) -> multiply
    void rotate(float,float,float,float) -> rotate
    void scale(float,float,float) -> scale
    void translate(float,float,float) -> translate
    float computeCofactor(int,int) -> computeCofactor
    boolean inverse() -> inverse
    boolean inverseTranspose() -> inverseTranspose
    void transpose() -> transpose
android.support.v8.renderscript.RSDriverException -> android.support.v8.renderscript.RSDriverException:
android.support.v8.renderscript.RSIllegalArgumentException -> android.support.v8.renderscript.RSIllegalArgumentException:
android.support.v8.renderscript.RSInvalidStateException -> android.support.v8.renderscript.RSInvalidStateException:
android.support.v8.renderscript.RSRuntimeException -> android.support.v8.renderscript.RSRuntimeException:
android.support.v8.renderscript.RenderScript -> android.support.v8.renderscript.RenderScript:
    java.lang.String LOG_TAG -> LOG_TAG
    boolean DEBUG -> DEBUG
    boolean LOG_ENABLED -> LOG_ENABLED
    android.content.Context mApplicationContext -> mApplicationContext
    boolean sInitialized -> sInitialized
    boolean sUseGCHooks -> sUseGCHooks
    java.lang.Object sRuntime -> sRuntime
    java.lang.reflect.Method registerNativeAllocation -> registerNativeAllocation
    java.lang.reflect.Method registerNativeFree -> registerNativeFree
    java.lang.Object lock -> lock
    boolean isNative -> isNative
    int thunk -> thunk
    java.lang.String CACHE_PATH -> CACHE_PATH
    java.lang.String mCachePath -> mCachePath
    int mDev -> mDev
    int mContext -> mContext
    android.support.v8.renderscript.RenderScript$MessageThread mMessageThread -> mMessageThread
    android.support.v8.renderscript.Element mElement_U8 -> mElement_U8
    android.support.v8.renderscript.Element mElement_I8 -> mElement_I8
    android.support.v8.renderscript.Element mElement_U16 -> mElement_U16
    android.support.v8.renderscript.Element mElement_I16 -> mElement_I16
    android.support.v8.renderscript.Element mElement_U32 -> mElement_U32
    android.support.v8.renderscript.Element mElement_I32 -> mElement_I32
    android.support.v8.renderscript.Element mElement_U64 -> mElement_U64
    android.support.v8.renderscript.Element mElement_I64 -> mElement_I64
    android.support.v8.renderscript.Element mElement_F32 -> mElement_F32
    android.support.v8.renderscript.Element mElement_F64 -> mElement_F64
    android.support.v8.renderscript.Element mElement_BOOLEAN -> mElement_BOOLEAN
    android.support.v8.renderscript.Element mElement_ELEMENT -> mElement_ELEMENT
    android.support.v8.renderscript.Element mElement_TYPE -> mElement_TYPE
    android.support.v8.renderscript.Element mElement_ALLOCATION -> mElement_ALLOCATION
    android.support.v8.renderscript.Element mElement_SAMPLER -> mElement_SAMPLER
    android.support.v8.renderscript.Element mElement_SCRIPT -> mElement_SCRIPT
    android.support.v8.renderscript.Element mElement_A_8 -> mElement_A_8
    android.support.v8.renderscript.Element mElement_RGB_565 -> mElement_RGB_565
    android.support.v8.renderscript.Element mElement_RGB_888 -> mElement_RGB_888
    android.support.v8.renderscript.Element mElement_RGBA_5551 -> mElement_RGBA_5551
    android.support.v8.renderscript.Element mElement_RGBA_4444 -> mElement_RGBA_4444
    android.support.v8.renderscript.Element mElement_RGBA_8888 -> mElement_RGBA_8888
    android.support.v8.renderscript.Element mElement_FLOAT_2 -> mElement_FLOAT_2
    android.support.v8.renderscript.Element mElement_FLOAT_3 -> mElement_FLOAT_3
    android.support.v8.renderscript.Element mElement_FLOAT_4 -> mElement_FLOAT_4
    android.support.v8.renderscript.Element mElement_DOUBLE_2 -> mElement_DOUBLE_2
    android.support.v8.renderscript.Element mElement_DOUBLE_3 -> mElement_DOUBLE_3
    android.support.v8.renderscript.Element mElement_DOUBLE_4 -> mElement_DOUBLE_4
    android.support.v8.renderscript.Element mElement_UCHAR_2 -> mElement_UCHAR_2
    android.support.v8.renderscript.Element mElement_UCHAR_3 -> mElement_UCHAR_3
    android.support.v8.renderscript.Element mElement_UCHAR_4 -> mElement_UCHAR_4
    android.support.v8.renderscript.Element mElement_CHAR_2 -> mElement_CHAR_2
    android.support.v8.renderscript.Element mElement_CHAR_3 -> mElement_CHAR_3
    android.support.v8.renderscript.Element mElement_CHAR_4 -> mElement_CHAR_4
    android.support.v8.renderscript.Element mElement_USHORT_2 -> mElement_USHORT_2
    android.support.v8.renderscript.Element mElement_USHORT_3 -> mElement_USHORT_3
    android.support.v8.renderscript.Element mElement_USHORT_4 -> mElement_USHORT_4
    android.support.v8.renderscript.Element mElement_SHORT_2 -> mElement_SHORT_2
    android.support.v8.renderscript.Element mElement_SHORT_3 -> mElement_SHORT_3
    android.support.v8.renderscript.Element mElement_SHORT_4 -> mElement_SHORT_4
    android.support.v8.renderscript.Element mElement_UINT_2 -> mElement_UINT_2
    android.support.v8.renderscript.Element mElement_UINT_3 -> mElement_UINT_3
    android.support.v8.renderscript.Element mElement_UINT_4 -> mElement_UINT_4
    android.support.v8.renderscript.Element mElement_INT_2 -> mElement_INT_2
    android.support.v8.renderscript.Element mElement_INT_3 -> mElement_INT_3
    android.support.v8.renderscript.Element mElement_INT_4 -> mElement_INT_4
    android.support.v8.renderscript.Element mElement_ULONG_2 -> mElement_ULONG_2
    android.support.v8.renderscript.Element mElement_ULONG_3 -> mElement_ULONG_3
    android.support.v8.renderscript.Element mElement_ULONG_4 -> mElement_ULONG_4
    android.support.v8.renderscript.Element mElement_LONG_2 -> mElement_LONG_2
    android.support.v8.renderscript.Element mElement_LONG_3 -> mElement_LONG_3
    android.support.v8.renderscript.Element mElement_LONG_4 -> mElement_LONG_4
    android.support.v8.renderscript.Element mElement_MATRIX_4X4 -> mElement_MATRIX_4X4
    android.support.v8.renderscript.Element mElement_MATRIX_3X3 -> mElement_MATRIX_3X3
    android.support.v8.renderscript.Element mElement_MATRIX_2X2 -> mElement_MATRIX_2X2
    android.support.v8.renderscript.Sampler mSampler_CLAMP_NEAREST -> mSampler_CLAMP_NEAREST
    android.support.v8.renderscript.Sampler mSampler_CLAMP_LINEAR -> mSampler_CLAMP_LINEAR
    android.support.v8.renderscript.Sampler mSampler_CLAMP_LINEAR_MIP_LINEAR -> mSampler_CLAMP_LINEAR_MIP_LINEAR
    android.support.v8.renderscript.Sampler mSampler_WRAP_NEAREST -> mSampler_WRAP_NEAREST
    android.support.v8.renderscript.Sampler mSampler_WRAP_LINEAR -> mSampler_WRAP_LINEAR
    android.support.v8.renderscript.Sampler mSampler_WRAP_LINEAR_MIP_LINEAR -> mSampler_WRAP_LINEAR_MIP_LINEAR
    android.support.v8.renderscript.Sampler mSampler_MIRRORED_REPEAT_NEAREST -> mSampler_MIRRORED_REPEAT_NEAREST
    android.support.v8.renderscript.Sampler mSampler_MIRRORED_REPEAT_LINEAR -> mSampler_MIRRORED_REPEAT_LINEAR
    android.support.v8.renderscript.Sampler mSampler_MIRRORED_REPEAT_LINEAR_MIP_LINEAR -> mSampler_MIRRORED_REPEAT_LINEAR_MIP_LINEAR
    android.support.v8.renderscript.RenderScript$RSMessageHandler mMessageCallback -> mMessageCallback
    android.support.v8.renderscript.RenderScript$RSErrorHandler mErrorCallback -> mErrorCallback
    int nDeviceCreate() -> nDeviceCreate
    void nDeviceDestroy(int) -> nDeviceDestroy
    void nDeviceSetConfig(int,int,int) -> nDeviceSetConfig
    int nContextGetUserMessage(int,int[]) -> nContextGetUserMessage
    java.lang.String nContextGetErrorMessage(int) -> nContextGetErrorMessage
    int nContextPeekMessage(int,int[]) -> nContextPeekMessage
    void nContextInitToClient(int) -> nContextInitToClient
    void nContextDeinitToClient(int) -> nContextDeinitToClient
    boolean shouldThunk() -> shouldThunk
    void setupDiskCache(java.io.File) -> setupDiskCache
    int rsnContextCreate(int,int,int,int) -> rsnContextCreate
    int nContextCreate(int,int,int,int) -> nContextCreate
    void rsnContextDestroy(int) -> rsnContextDestroy
    void nContextDestroy() -> nContextDestroy
    void rsnContextSetPriority(int,int) -> rsnContextSetPriority
    void nContextSetPriority(int) -> nContextSetPriority
    void rsnContextDump(int,int) -> rsnContextDump
    void nContextDump(int) -> nContextDump
    void rsnContextFinish(int) -> rsnContextFinish
    void nContextFinish() -> nContextFinish
    void rsnContextSendMessage(int,int,int[]) -> rsnContextSendMessage
    void nContextSendMessage(int,int[]) -> nContextSendMessage
    void rsnObjDestroy(int,int) -> rsnObjDestroy
    void nObjDestroy(int) -> nObjDestroy
    int rsnElementCreate(int,int,int,boolean,int) -> rsnElementCreate
    int nElementCreate(int,int,boolean,int) -> nElementCreate
    int rsnElementCreate2(int,int[],java.lang.String[],int[]) -> rsnElementCreate2
    int nElementCreate2(int[],java.lang.String[],int[]) -> nElementCreate2
    void rsnElementGetNativeData(int,int,int[]) -> rsnElementGetNativeData
    void nElementGetNativeData(int,int[]) -> nElementGetNativeData
    void rsnElementGetSubElements(int,int,int[],java.lang.String[],int[]) -> rsnElementGetSubElements
    void nElementGetSubElements(int,int[],java.lang.String[],int[]) -> nElementGetSubElements
    int rsnTypeCreate(int,int,int,int,int,boolean,boolean,int) -> rsnTypeCreate
    int nTypeCreate(int,int,int,int,boolean,boolean,int) -> nTypeCreate
    void rsnTypeGetNativeData(int,int,int[]) -> rsnTypeGetNativeData
    void nTypeGetNativeData(int,int[]) -> nTypeGetNativeData
    int rsnAllocationCreateTyped(int,int,int,int,int) -> rsnAllocationCreateTyped
    int nAllocationCreateTyped(int,int,int,int) -> nAllocationCreateTyped
    int rsnAllocationCreateFromBitmap(int,int,int,android.graphics.Bitmap,int) -> rsnAllocationCreateFromBitmap
    int nAllocationCreateFromBitmap(int,int,android.graphics.Bitmap,int) -> nAllocationCreateFromBitmap
    int rsnAllocationCreateBitmapBackedAllocation(int,int,int,android.graphics.Bitmap,int) -> rsnAllocationCreateBitmapBackedAllocation
    int nAllocationCreateBitmapBackedAllocation(int,int,android.graphics.Bitmap,int) -> nAllocationCreateBitmapBackedAllocation
    int rsnAllocationCubeCreateFromBitmap(int,int,int,android.graphics.Bitmap,int) -> rsnAllocationCubeCreateFromBitmap
    int nAllocationCubeCreateFromBitmap(int,int,android.graphics.Bitmap,int) -> nAllocationCubeCreateFromBitmap
    int rsnAllocationCreateBitmapRef(int,int,android.graphics.Bitmap) -> rsnAllocationCreateBitmapRef
    int nAllocationCreateBitmapRef(int,android.graphics.Bitmap) -> nAllocationCreateBitmapRef
    int rsnAllocationCreateFromAssetStream(int,int,int,int) -> rsnAllocationCreateFromAssetStream
    int nAllocationCreateFromAssetStream(int,int,int) -> nAllocationCreateFromAssetStream
    void rsnAllocationCopyToBitmap(int,int,android.graphics.Bitmap) -> rsnAllocationCopyToBitmap
    void nAllocationCopyToBitmap(int,android.graphics.Bitmap) -> nAllocationCopyToBitmap
    void rsnAllocationSyncAll(int,int,int) -> rsnAllocationSyncAll
    void nAllocationSyncAll(int,int) -> nAllocationSyncAll
    void rsnAllocationIoSend(int,int) -> rsnAllocationIoSend
    void nAllocationIoSend(int) -> nAllocationIoSend
    void rsnAllocationIoReceive(int,int) -> rsnAllocationIoReceive
    void nAllocationIoReceive(int) -> nAllocationIoReceive
    void rsnAllocationGenerateMipmaps(int,int) -> rsnAllocationGenerateMipmaps
    void nAllocationGenerateMipmaps(int) -> nAllocationGenerateMipmaps
    void rsnAllocationCopyFromBitmap(int,int,android.graphics.Bitmap) -> rsnAllocationCopyFromBitmap
    void nAllocationCopyFromBitmap(int,android.graphics.Bitmap) -> nAllocationCopyFromBitmap
    void rsnAllocationData1D(int,int,int,int,int,int[],int) -> rsnAllocationData1D
    void nAllocationData1D(int,int,int,int,int[],int) -> nAllocationData1D
    void rsnAllocationData1D(int,int,int,int,int,short[],int) -> rsnAllocationData1D
    void nAllocationData1D(int,int,int,int,short[],int) -> nAllocationData1D
    void rsnAllocationData1D(int,int,int,int,int,byte[],int) -> rsnAllocationData1D
    void nAllocationData1D(int,int,int,int,byte[],int) -> nAllocationData1D
    void rsnAllocationData1D(int,int,int,int,int,float[],int) -> rsnAllocationData1D
    void nAllocationData1D(int,int,int,int,float[],int) -> nAllocationData1D
    void rsnAllocationElementData1D(int,int,int,int,int,byte[],int) -> rsnAllocationElementData1D
    void nAllocationElementData1D(int,int,int,int,byte[],int) -> nAllocationElementData1D
    void rsnAllocationData2D(int,int,int,int,int,int,int,int,int,int,int,int,int) -> rsnAllocationData2D
    void nAllocationData2D(int,int,int,int,int,int,int,int,int,int,int,int) -> nAllocationData2D
    void rsnAllocationData2D(int,int,int,int,int,int,int,int,byte[],int) -> rsnAllocationData2D
    void nAllocationData2D(int,int,int,int,int,int,int,byte[],int) -> nAllocationData2D
    void rsnAllocationData2D(int,int,int,int,int,int,int,int,short[],int) -> rsnAllocationData2D
    void nAllocationData2D(int,int,int,int,int,int,int,short[],int) -> nAllocationData2D
    void rsnAllocationData2D(int,int,int,int,int,int,int,int,int[],int) -> rsnAllocationData2D
    void nAllocationData2D(int,int,int,int,int,int,int,int[],int) -> nAllocationData2D
    void rsnAllocationData2D(int,int,int,int,int,int,int,int,float[],int) -> rsnAllocationData2D
    void nAllocationData2D(int,int,int,int,int,int,int,float[],int) -> nAllocationData2D
    void rsnAllocationData2D(int,int,int,int,int,int,android.graphics.Bitmap) -> rsnAllocationData2D
    void nAllocationData2D(int,int,int,int,int,android.graphics.Bitmap) -> nAllocationData2D
    void rsnAllocationData3D(int,int,int,int,int,int,int,int,int,int,int,int,int,int) -> rsnAllocationData3D
    void nAllocationData3D(int,int,int,int,int,int,int,int,int,int,int,int,int) -> nAllocationData3D
    void rsnAllocationData3D(int,int,int,int,int,int,int,int,int,byte[],int) -> rsnAllocationData3D
    void nAllocationData3D(int,int,int,int,int,int,int,int,byte[],int) -> nAllocationData3D
    void rsnAllocationData3D(int,int,int,int,int,int,int,int,int,short[],int) -> rsnAllocationData3D
    void nAllocationData3D(int,int,int,int,int,int,int,int,short[],int) -> nAllocationData3D
    void rsnAllocationData3D(int,int,int,int,int,int,int,int,int,int[],int) -> rsnAllocationData3D
    void nAllocationData3D(int,int,int,int,int,int,int,int,int[],int) -> nAllocationData3D
    void rsnAllocationData3D(int,int,int,int,int,int,int,int,int,float[],int) -> rsnAllocationData3D
    void nAllocationData3D(int,int,int,int,int,int,int,int,float[],int) -> nAllocationData3D
    void rsnAllocationRead(int,int,byte[]) -> rsnAllocationRead
    void nAllocationRead(int,byte[]) -> nAllocationRead
    void rsnAllocationRead(int,int,short[]) -> rsnAllocationRead
    void nAllocationRead(int,short[]) -> nAllocationRead
    void rsnAllocationRead(int,int,int[]) -> rsnAllocationRead
    void nAllocationRead(int,int[]) -> nAllocationRead
    void rsnAllocationRead(int,int,float[]) -> rsnAllocationRead
    void nAllocationRead(int,float[]) -> nAllocationRead
    int rsnAllocationGetType(int,int) -> rsnAllocationGetType
    int nAllocationGetType(int) -> nAllocationGetType
    void rsnAllocationResize1D(int,int,int) -> rsnAllocationResize1D
    void nAllocationResize1D(int,int) -> nAllocationResize1D
    void rsnAllocationResize2D(int,int,int,int) -> rsnAllocationResize2D
    void nAllocationResize2D(int,int,int) -> nAllocationResize2D
    void rsnScriptBindAllocation(int,int,int,int) -> rsnScriptBindAllocation
    void nScriptBindAllocation(int,int,int) -> nScriptBindAllocation
    void rsnScriptSetTimeZone(int,int,byte[]) -> rsnScriptSetTimeZone
    void nScriptSetTimeZone(int,byte[]) -> nScriptSetTimeZone
    void rsnScriptInvoke(int,int,int) -> rsnScriptInvoke
    void nScriptInvoke(int,int) -> nScriptInvoke
    void rsnScriptForEach(int,int,int,int,int,byte[]) -> rsnScriptForEach
    void rsnScriptForEach(int,int,int,int,int) -> rsnScriptForEach
    void rsnScriptForEachClipped(int,int,int,int,int,byte[],int,int,int,int,int,int) -> rsnScriptForEachClipped
    void rsnScriptForEachClipped(int,int,int,int,int,int,int,int,int,int,int) -> rsnScriptForEachClipped
    void nScriptForEach(int,int,int,int,byte[]) -> nScriptForEach
    void nScriptForEachClipped(int,int,int,int,byte[],int,int,int,int,int,int) -> nScriptForEachClipped
    void rsnScriptInvokeV(int,int,int,byte[]) -> rsnScriptInvokeV
    void nScriptInvokeV(int,int,byte[]) -> nScriptInvokeV
    void rsnScriptSetVarI(int,int,int,int) -> rsnScriptSetVarI
    void nScriptSetVarI(int,int,int) -> nScriptSetVarI
    void rsnScriptSetVarJ(int,int,int,long) -> rsnScriptSetVarJ
    void nScriptSetVarJ(int,int,long) -> nScriptSetVarJ
    void rsnScriptSetVarF(int,int,int,float) -> rsnScriptSetVarF
    void nScriptSetVarF(int,int,float) -> nScriptSetVarF
    void rsnScriptSetVarD(int,int,int,double) -> rsnScriptSetVarD
    void nScriptSetVarD(int,int,double) -> nScriptSetVarD
    void rsnScriptSetVarV(int,int,int,byte[]) -> rsnScriptSetVarV
    void nScriptSetVarV(int,int,byte[]) -> nScriptSetVarV
    void rsnScriptSetVarVE(int,int,int,byte[],int,int[]) -> rsnScriptSetVarVE
    void nScriptSetVarVE(int,int,byte[],int,int[]) -> nScriptSetVarVE
    void rsnScriptSetVarObj(int,int,int,int) -> rsnScriptSetVarObj
    void nScriptSetVarObj(int,int,int) -> nScriptSetVarObj
    int rsnScriptCCreate(int,java.lang.String,java.lang.String,byte[],int) -> rsnScriptCCreate
    int nScriptCCreate(java.lang.String,java.lang.String,byte[],int) -> nScriptCCreate
    int rsnScriptIntrinsicCreate(int,int,int) -> rsnScriptIntrinsicCreate
    int nScriptIntrinsicCreate(int,int) -> nScriptIntrinsicCreate
    int rsnScriptKernelIDCreate(int,int,int,int) -> rsnScriptKernelIDCreate
    int nScriptKernelIDCreate(int,int,int) -> nScriptKernelIDCreate
    int rsnScriptFieldIDCreate(int,int,int) -> rsnScriptFieldIDCreate
    int nScriptFieldIDCreate(int,int) -> nScriptFieldIDCreate
    int rsnScriptGroupCreate(int,int[],int[],int[],int[],int[]) -> rsnScriptGroupCreate
    int nScriptGroupCreate(int[],int[],int[],int[],int[]) -> nScriptGroupCreate
    void rsnScriptGroupSetInput(int,int,int,int) -> rsnScriptGroupSetInput
    void nScriptGroupSetInput(int,int,int) -> nScriptGroupSetInput
    void rsnScriptGroupSetOutput(int,int,int,int) -> rsnScriptGroupSetOutput
    void nScriptGroupSetOutput(int,int,int) -> nScriptGroupSetOutput
    void rsnScriptGroupExecute(int,int) -> rsnScriptGroupExecute
    void nScriptGroupExecute(int) -> nScriptGroupExecute
    int rsnSamplerCreate(int,int,int,int,int,int,float) -> rsnSamplerCreate
    int nSamplerCreate(int,int,int,int,int,float) -> nSamplerCreate
    void setMessageHandler(android.support.v8.renderscript.RenderScript$RSMessageHandler) -> setMessageHandler
    android.support.v8.renderscript.RenderScript$RSMessageHandler getMessageHandler() -> getMessageHandler
    void sendMessage(int,int[]) -> sendMessage
    void setErrorHandler(android.support.v8.renderscript.RenderScript$RSErrorHandler) -> setErrorHandler
    android.support.v8.renderscript.RenderScript$RSErrorHandler getErrorHandler() -> getErrorHandler
    void validate() -> validate
    void setPriority(android.support.v8.renderscript.RenderScript$Priority) -> setPriority
    android.content.Context getApplicationContext() -> getApplicationContext
    android.support.v8.renderscript.RenderScript create(android.content.Context,int) -> create
    android.support.v8.renderscript.RenderScript create(android.content.Context,int,android.support.v8.renderscript.RenderScript$ContextType) -> create
    android.support.v8.renderscript.RenderScript create(android.content.Context) -> create
    android.support.v8.renderscript.RenderScript create(android.content.Context,android.support.v8.renderscript.RenderScript$ContextType) -> create
    void contextDump() -> contextDump
    void finish() -> finish
    void destroy() -> destroy
    boolean isAlive() -> isAlive
    int safeID(android.support.v8.renderscript.BaseObj) -> safeID
android.support.v8.renderscript.RenderScript$1 -> android.support.v8.renderscript.RenderScript$1:
    android.support.v8.renderscript.RenderScript this$0 -> this$0
    void run() -> run
android.support.v8.renderscript.RenderScript$2 -> android.support.v8.renderscript.RenderScript$2:
    android.support.v8.renderscript.RenderScript this$0 -> this$0
    void run() -> run
android.support.v8.renderscript.RenderScript$ContextType -> android.support.v8.renderscript.RenderScript$ContextType:
    android.support.v8.renderscript.RenderScript$ContextType NORMAL -> NORMAL
    android.support.v8.renderscript.RenderScript$ContextType DEBUG -> DEBUG
    android.support.v8.renderscript.RenderScript$ContextType PROFILE -> PROFILE
    int mID -> mID
    android.support.v8.renderscript.RenderScript$ContextType[] $VALUES -> $VALUES
    android.support.v8.renderscript.RenderScript$ContextType[] values() -> values
    android.support.v8.renderscript.RenderScript$ContextType valueOf(java.lang.String) -> valueOf
android.support.v8.renderscript.RenderScript$MessageThread -> android.support.v8.renderscript.RenderScript$MessageThread:
    android.support.v8.renderscript.RenderScript mRS -> mRS
    boolean mRun -> mRun
    int[] mAuxData -> mAuxData
    int RS_MESSAGE_TO_CLIENT_NONE -> RS_MESSAGE_TO_CLIENT_NONE
    int RS_MESSAGE_TO_CLIENT_EXCEPTION -> RS_MESSAGE_TO_CLIENT_EXCEPTION
    int RS_MESSAGE_TO_CLIENT_RESIZE -> RS_MESSAGE_TO_CLIENT_RESIZE
    int RS_MESSAGE_TO_CLIENT_ERROR -> RS_MESSAGE_TO_CLIENT_ERROR
    int RS_MESSAGE_TO_CLIENT_USER -> RS_MESSAGE_TO_CLIENT_USER
    int RS_ERROR_FATAL_UNKNOWN -> RS_ERROR_FATAL_UNKNOWN
    void run() -> run
android.support.v8.renderscript.RenderScript$Priority -> android.support.v8.renderscript.RenderScript$Priority:
    android.support.v8.renderscript.RenderScript$Priority LOW -> LOW
    android.support.v8.renderscript.RenderScript$Priority NORMAL -> NORMAL
    int mID -> mID
    android.support.v8.renderscript.RenderScript$Priority[] $VALUES -> $VALUES
    android.support.v8.renderscript.RenderScript$Priority[] values() -> values
    android.support.v8.renderscript.RenderScript$Priority valueOf(java.lang.String) -> valueOf
android.support.v8.renderscript.RenderScript$RSErrorHandler -> android.support.v8.renderscript.RenderScript$RSErrorHandler:
    java.lang.String mErrorMessage -> mErrorMessage
    int mErrorNum -> mErrorNum
    void run() -> run
android.support.v8.renderscript.RenderScript$RSMessageHandler -> android.support.v8.renderscript.RenderScript$RSMessageHandler:
    int[] mData -> mData
    int mID -> mID
    int mLength -> mLength
    void run() -> run
android.support.v8.renderscript.RenderScriptThunker -> android.support.v8.renderscript.RenderScriptThunker:
    android.renderscript.RenderScript mN -> mN
    void validate() -> validate
    void setPriority(android.support.v8.renderscript.RenderScript$Priority) -> setPriority
    android.support.v8.renderscript.RenderScript create(android.content.Context,int) -> create
    void contextDump() -> contextDump
    void finish() -> finish
    void destroy() -> destroy
android.support.v8.renderscript.Sampler -> android.support.v8.renderscript.Sampler:
    android.support.v8.renderscript.Sampler$Value mMin -> mMin
    android.support.v8.renderscript.Sampler$Value mMag -> mMag
    android.support.v8.renderscript.Sampler$Value mWrapS -> mWrapS
    android.support.v8.renderscript.Sampler$Value mWrapT -> mWrapT
    android.support.v8.renderscript.Sampler$Value mWrapR -> mWrapR
    float mAniso -> mAniso
    android.support.v8.renderscript.Sampler$Value getMinification() -> getMinification
    android.support.v8.renderscript.Sampler$Value getMagnification() -> getMagnification
    android.support.v8.renderscript.Sampler$Value getWrapS() -> getWrapS
    android.support.v8.renderscript.Sampler$Value getWrapT() -> getWrapT
    float getAnisotropy() -> getAnisotropy
    android.support.v8.renderscript.Sampler CLAMP_NEAREST(android.support.v8.renderscript.RenderScript) -> CLAMP_NEAREST
    android.support.v8.renderscript.Sampler CLAMP_LINEAR(android.support.v8.renderscript.RenderScript) -> CLAMP_LINEAR
    android.support.v8.renderscript.Sampler CLAMP_LINEAR_MIP_LINEAR(android.support.v8.renderscript.RenderScript) -> CLAMP_LINEAR_MIP_LINEAR
    android.support.v8.renderscript.Sampler WRAP_NEAREST(android.support.v8.renderscript.RenderScript) -> WRAP_NEAREST
    android.support.v8.renderscript.Sampler WRAP_LINEAR(android.support.v8.renderscript.RenderScript) -> WRAP_LINEAR
    android.support.v8.renderscript.Sampler WRAP_LINEAR_MIP_LINEAR(android.support.v8.renderscript.RenderScript) -> WRAP_LINEAR_MIP_LINEAR
    android.support.v8.renderscript.Sampler MIRRORED_REPEAT_NEAREST(android.support.v8.renderscript.RenderScript) -> MIRRORED_REPEAT_NEAREST
    android.support.v8.renderscript.Sampler MIRRORED_REPEAT_LINEAR(android.support.v8.renderscript.RenderScript) -> MIRRORED_REPEAT_LINEAR
android.support.v8.renderscript.Sampler$Builder -> android.support.v8.renderscript.Sampler$Builder:
    android.support.v8.renderscript.RenderScript mRS -> mRS
    android.support.v8.renderscript.Sampler$Value mMin -> mMin
    android.support.v8.renderscript.Sampler$Value mMag -> mMag
    android.support.v8.renderscript.Sampler$Value mWrapS -> mWrapS
    android.support.v8.renderscript.Sampler$Value mWrapT -> mWrapT
    android.support.v8.renderscript.Sampler$Value mWrapR -> mWrapR
    float mAniso -> mAniso
    void setMinification(android.support.v8.renderscript.Sampler$Value) -> setMinification
    void setMagnification(android.support.v8.renderscript.Sampler$Value) -> setMagnification
    void setWrapS(android.support.v8.renderscript.Sampler$Value) -> setWrapS
    void setWrapT(android.support.v8.renderscript.Sampler$Value) -> setWrapT
    void setAnisotropy(float) -> setAnisotropy
    android.support.v8.renderscript.Sampler create() -> create
android.support.v8.renderscript.Sampler$Value -> android.support.v8.renderscript.Sampler$Value:
    android.support.v8.renderscript.Sampler$Value NEAREST -> NEAREST
    android.support.v8.renderscript.Sampler$Value LINEAR -> LINEAR
    android.support.v8.renderscript.Sampler$Value LINEAR_MIP_LINEAR -> LINEAR_MIP_LINEAR
    android.support.v8.renderscript.Sampler$Value LINEAR_MIP_NEAREST -> LINEAR_MIP_NEAREST
    android.support.v8.renderscript.Sampler$Value WRAP -> WRAP
    android.support.v8.renderscript.Sampler$Value CLAMP -> CLAMP
    android.support.v8.renderscript.Sampler$Value MIRRORED_REPEAT -> MIRRORED_REPEAT
    int mID -> mID
    android.support.v8.renderscript.Sampler$Value[] $VALUES -> $VALUES
    android.support.v8.renderscript.Sampler$Value[] values() -> values
    android.support.v8.renderscript.Sampler$Value valueOf(java.lang.String) -> valueOf
android.support.v8.renderscript.SamplerThunker -> android.support.v8.renderscript.SamplerThunker:
    android.renderscript.Sampler mN -> mN
    android.renderscript.BaseObj getNObj() -> getNObj
    android.renderscript.Sampler$Value convertValue(android.support.v8.renderscript.Sampler$Value) -> convertValue
android.support.v8.renderscript.SamplerThunker$1 -> android.support.v8.renderscript.SamplerThunker$1:
    int[] $SwitchMap$android$support$v8$renderscript$Sampler$Value -> $SwitchMap$android$support$v8$renderscript$Sampler$Value
android.support.v8.renderscript.SamplerThunker$Builder -> android.support.v8.renderscript.SamplerThunker$Builder:
    android.support.v8.renderscript.RenderScriptThunker mRS -> mRS
    android.support.v8.renderscript.Sampler$Value mMin -> mMin
    android.support.v8.renderscript.Sampler$Value mMag -> mMag
    android.support.v8.renderscript.Sampler$Value mWrapS -> mWrapS
    android.support.v8.renderscript.Sampler$Value mWrapT -> mWrapT
    android.support.v8.renderscript.Sampler$Value mWrapR -> mWrapR
    float mAniso -> mAniso
    void setMinification(android.support.v8.renderscript.Sampler$Value) -> setMinification
    void setMagnification(android.support.v8.renderscript.Sampler$Value) -> setMagnification
    void setWrapS(android.support.v8.renderscript.Sampler$Value) -> setWrapS
    void setWrapT(android.support.v8.renderscript.Sampler$Value) -> setWrapT
    void setAnisotropy(float) -> setAnisotropy
    android.support.v8.renderscript.Sampler create() -> create
android.support.v8.renderscript.Script -> android.support.v8.renderscript.Script:
    android.support.v8.renderscript.ScriptCThunker mT -> mT
    android.util.SparseArray mKIDs -> mKIDs
    android.util.SparseArray mFIDs -> mFIDs
    android.renderscript.Script getNObj() -> getNObj
    android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element) -> createKernelID
    android.support.v8.renderscript.Script$FieldID createFieldID(int,android.support.v8.renderscript.Element) -> createFieldID
    void invoke(int) -> invoke
    void invoke(int,android.support.v8.renderscript.FieldPacker) -> invoke
    void bindAllocation(android.support.v8.renderscript.Allocation,int) -> bindAllocation
    void setTimeZone(java.lang.String) -> setTimeZone
    void forEach(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.FieldPacker) -> forEach
    void forEach(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.FieldPacker,android.support.v8.renderscript.Script$LaunchOptions) -> forEach
    void setVar(int,float) -> setVar
    void setVar(int,double) -> setVar
    void setVar(int,int) -> setVar
    void setVar(int,long) -> setVar
    void setVar(int,boolean) -> setVar
    void setVar(int,android.support.v8.renderscript.BaseObj) -> setVar
    void setVar(int,android.support.v8.renderscript.FieldPacker) -> setVar
    void setVar(int,android.support.v8.renderscript.FieldPacker,android.support.v8.renderscript.Element,int[]) -> setVar
    android.renderscript.BaseObj getNObj() -> getNObj
android.support.v8.renderscript.Script$Builder -> android.support.v8.renderscript.Script$Builder:
    android.support.v8.renderscript.RenderScript mRS -> mRS
android.support.v8.renderscript.Script$FieldBase -> android.support.v8.renderscript.Script$FieldBase:
    android.support.v8.renderscript.Element mElement -> mElement
    android.support.v8.renderscript.Allocation mAllocation -> mAllocation
    void init(android.support.v8.renderscript.RenderScript,int) -> init
    void init(android.support.v8.renderscript.RenderScript,int,int) -> init
    android.support.v8.renderscript.Element getElement() -> getElement
    android.support.v8.renderscript.Type getType() -> getType
    android.support.v8.renderscript.Allocation getAllocation() -> getAllocation
    void updateAllocation() -> updateAllocation
android.support.v8.renderscript.Script$FieldID -> android.support.v8.renderscript.Script$FieldID:
    android.renderscript.Script$FieldID mN -> mN
    android.support.v8.renderscript.Script mScript -> mScript
    int mSlot -> mSlot
android.support.v8.renderscript.Script$KernelID -> android.support.v8.renderscript.Script$KernelID:
    android.renderscript.Script$KernelID mN -> mN
    android.support.v8.renderscript.Script mScript -> mScript
    int mSlot -> mSlot
    int mSig -> mSig
android.support.v8.renderscript.Script$LaunchOptions -> android.support.v8.renderscript.Script$LaunchOptions:
    int xstart -> xstart
    int ystart -> ystart
    int xend -> xend
    int yend -> yend
    int zstart -> zstart
    int zend -> zend
    int strategy -> strategy
    android.support.v8.renderscript.Script$LaunchOptions setX(int,int) -> setX
    android.support.v8.renderscript.Script$LaunchOptions setY(int,int) -> setY
    android.support.v8.renderscript.Script$LaunchOptions setZ(int,int) -> setZ
    int getXStart() -> getXStart
    int getXEnd() -> getXEnd
    int getYStart() -> getYStart
    int getYEnd() -> getYEnd
    int getZStart() -> getZStart
    int getZEnd() -> getZEnd
    int access$000(android.support.v8.renderscript.Script$LaunchOptions) -> access$000
    int access$100(android.support.v8.renderscript.Script$LaunchOptions) -> access$100
    int access$200(android.support.v8.renderscript.Script$LaunchOptions) -> access$200
    int access$300(android.support.v8.renderscript.Script$LaunchOptions) -> access$300
    int access$400(android.support.v8.renderscript.Script$LaunchOptions) -> access$400
    int access$500(android.support.v8.renderscript.Script$LaunchOptions) -> access$500
android.support.v8.renderscript.ScriptC -> android.support.v8.renderscript.ScriptC:
    java.lang.String TAG -> TAG
    int internalCreate(android.support.v8.renderscript.RenderScript,android.content.res.Resources,int) -> internalCreate
android.support.v8.renderscript.ScriptCThunker -> android.support.v8.renderscript.ScriptCThunker:
    java.lang.String TAG -> TAG
    android.renderscript.Script$KernelID thunkCreateKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element) -> thunkCreateKernelID
    void thunkInvoke(int) -> thunkInvoke
    void thunkBindAllocation(android.support.v8.renderscript.Allocation,int) -> thunkBindAllocation
    void thunkSetTimeZone(java.lang.String) -> thunkSetTimeZone
    void thunkInvoke(int,android.support.v8.renderscript.FieldPacker) -> thunkInvoke
    void thunkForEach(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.FieldPacker) -> thunkForEach
    void thunkForEach(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.FieldPacker,android.support.v8.renderscript.Script$LaunchOptions) -> thunkForEach
    void thunkSetVar(int,float) -> thunkSetVar
    void thunkSetVar(int,double) -> thunkSetVar
    void thunkSetVar(int,int) -> thunkSetVar
    void thunkSetVar(int,long) -> thunkSetVar
    void thunkSetVar(int,boolean) -> thunkSetVar
    void thunkSetVar(int,android.support.v8.renderscript.BaseObj) -> thunkSetVar
    void thunkSetVar(int,android.support.v8.renderscript.FieldPacker) -> thunkSetVar
    void thunkSetVar(int,android.support.v8.renderscript.FieldPacker,android.support.v8.renderscript.Element,int[]) -> thunkSetVar
    android.renderscript.Script$FieldID thunkCreateFieldID(int,android.support.v8.renderscript.Element) -> thunkCreateFieldID
android.support.v8.renderscript.ScriptGroup -> android.support.v8.renderscript.ScriptGroup:
    android.support.v8.renderscript.ScriptGroup$IO[] mOutputs -> mOutputs
    android.support.v8.renderscript.ScriptGroup$IO[] mInputs -> mInputs
    void setInput(android.support.v8.renderscript.Script$KernelID,android.support.v8.renderscript.Allocation) -> setInput
    void setOutput(android.support.v8.renderscript.Script$KernelID,android.support.v8.renderscript.Allocation) -> setOutput
    void execute() -> execute
android.support.v8.renderscript.ScriptGroup$Builder -> android.support.v8.renderscript.ScriptGroup$Builder:
    android.support.v8.renderscript.RenderScript mRS -> mRS
    java.util.ArrayList mNodes -> mNodes
    java.util.ArrayList mLines -> mLines
    int mKernelCount -> mKernelCount
    android.support.v8.renderscript.ScriptGroupThunker$Builder mT -> mT
    void validateCycle(android.support.v8.renderscript.ScriptGroup$Node,android.support.v8.renderscript.ScriptGroup$Node) -> validateCycle
    void mergeDAGs(int,int) -> mergeDAGs
    void validateDAGRecurse(android.support.v8.renderscript.ScriptGroup$Node,int) -> validateDAGRecurse
    void validateDAG() -> validateDAG
    android.support.v8.renderscript.ScriptGroup$Node findNode(android.support.v8.renderscript.Script) -> findNode
    android.support.v8.renderscript.ScriptGroup$Node findNode(android.support.v8.renderscript.Script$KernelID) -> findNode
    android.support.v8.renderscript.ScriptGroup$Builder addKernel(android.support.v8.renderscript.Script$KernelID) -> addKernel
    android.support.v8.renderscript.ScriptGroup$Builder addConnection(android.support.v8.renderscript.Type,android.support.v8.renderscript.Script$KernelID,android.support.v8.renderscript.Script$FieldID) -> addConnection
    android.support.v8.renderscript.ScriptGroup$Builder addConnection(android.support.v8.renderscript.Type,android.support.v8.renderscript.Script$KernelID,android.support.v8.renderscript.Script$KernelID) -> addConnection
    android.support.v8.renderscript.ScriptGroup create() -> create
android.support.v8.renderscript.ScriptGroup$ConnectLine -> android.support.v8.renderscript.ScriptGroup$ConnectLine:
    android.support.v8.renderscript.Script$FieldID mToF -> mToF
    android.support.v8.renderscript.Script$KernelID mToK -> mToK
    android.support.v8.renderscript.Script$KernelID mFrom -> mFrom
    android.support.v8.renderscript.Type mAllocationType -> mAllocationType
android.support.v8.renderscript.ScriptGroup$IO -> android.support.v8.renderscript.ScriptGroup$IO:
    android.support.v8.renderscript.Script$KernelID mKID -> mKID
    android.support.v8.renderscript.Allocation mAllocation -> mAllocation
android.support.v8.renderscript.ScriptGroup$Node -> android.support.v8.renderscript.ScriptGroup$Node:
    android.support.v8.renderscript.Script mScript -> mScript
    java.util.ArrayList mKernels -> mKernels
    java.util.ArrayList mInputs -> mInputs
    java.util.ArrayList mOutputs -> mOutputs
    int dagNumber -> dagNumber
    android.support.v8.renderscript.ScriptGroup$Node mNext -> mNext
android.support.v8.renderscript.ScriptGroupThunker -> android.support.v8.renderscript.ScriptGroupThunker:
    android.renderscript.ScriptGroup mN -> mN
    android.renderscript.ScriptGroup getNObj() -> getNObj
    void setInput(android.support.v8.renderscript.Script$KernelID,android.support.v8.renderscript.Allocation) -> setInput
    void setOutput(android.support.v8.renderscript.Script$KernelID,android.support.v8.renderscript.Allocation) -> setOutput
    void execute() -> execute
    android.renderscript.BaseObj getNObj() -> getNObj
android.support.v8.renderscript.ScriptGroupThunker$Builder -> android.support.v8.renderscript.ScriptGroupThunker$Builder:
    android.renderscript.ScriptGroup$Builder bN -> bN
    android.support.v8.renderscript.RenderScript mRS -> mRS
    android.support.v8.renderscript.ScriptGroupThunker$Builder addKernel(android.support.v8.renderscript.Script$KernelID) -> addKernel
    android.support.v8.renderscript.ScriptGroupThunker$Builder addConnection(android.support.v8.renderscript.Type,android.support.v8.renderscript.Script$KernelID,android.support.v8.renderscript.Script$FieldID) -> addConnection
    android.support.v8.renderscript.ScriptGroupThunker$Builder addConnection(android.support.v8.renderscript.Type,android.support.v8.renderscript.Script$KernelID,android.support.v8.renderscript.Script$KernelID) -> addConnection
    android.support.v8.renderscript.ScriptGroupThunker create() -> create
android.support.v8.renderscript.ScriptIntrinsic -> android.support.v8.renderscript.ScriptIntrinsic:
android.support.v8.renderscript.ScriptIntrinsic3DLUT -> android.support.v8.renderscript.ScriptIntrinsic3DLUT:
    android.support.v8.renderscript.Allocation mLUT -> mLUT
    android.support.v8.renderscript.Element mElement -> mElement
    android.support.v8.renderscript.ScriptIntrinsic3DLUT create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setLUT(android.support.v8.renderscript.Allocation) -> setLUT
    void forEach(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
android.support.v8.renderscript.ScriptIntrinsic3DLUTThunker -> android.support.v8.renderscript.ScriptIntrinsic3DLUTThunker:
    android.renderscript.ScriptIntrinsic3DLUT mN -> mN
    android.renderscript.ScriptIntrinsic3DLUT getNObj() -> getNObj
    android.support.v8.renderscript.ScriptIntrinsic3DLUTThunker create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setLUT(android.support.v8.renderscript.Allocation) -> setLUT
    void forEach(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
    android.renderscript.Script getNObj() -> getNObj
    android.renderscript.BaseObj getNObj() -> getNObj
android.support.v8.renderscript.ScriptIntrinsicBlend -> android.support.v8.renderscript.ScriptIntrinsicBlend:
    android.support.v8.renderscript.ScriptIntrinsicBlend create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> blend
    void forEachClear(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachClear
    android.support.v8.renderscript.Script$KernelID getKernelIDClear() -> getKernelIDClear
    void forEachSrc(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachSrc
    android.support.v8.renderscript.Script$KernelID getKernelIDSrc() -> getKernelIDSrc
    void forEachDst(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachDst
    android.support.v8.renderscript.Script$KernelID getKernelIDDst() -> getKernelIDDst
    void forEachSrcOver(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachSrcOver
    android.support.v8.renderscript.Script$KernelID getKernelIDSrcOver() -> getKernelIDSrcOver
    void forEachDstOver(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachDstOver
    android.support.v8.renderscript.Script$KernelID getKernelIDDstOver() -> getKernelIDDstOver
    void forEachSrcIn(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachSrcIn
    android.support.v8.renderscript.Script$KernelID getKernelIDSrcIn() -> getKernelIDSrcIn
    void forEachDstIn(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachDstIn
    android.support.v8.renderscript.Script$KernelID getKernelIDDstIn() -> getKernelIDDstIn
    void forEachSrcOut(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachSrcOut
    android.support.v8.renderscript.Script$KernelID getKernelIDSrcOut() -> getKernelIDSrcOut
    void forEachDstOut(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachDstOut
    android.support.v8.renderscript.Script$KernelID getKernelIDDstOut() -> getKernelIDDstOut
    void forEachSrcAtop(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachSrcAtop
    android.support.v8.renderscript.Script$KernelID getKernelIDSrcAtop() -> getKernelIDSrcAtop
    void forEachDstAtop(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachDstAtop
    android.support.v8.renderscript.Script$KernelID getKernelIDDstAtop() -> getKernelIDDstAtop
    void forEachXor(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachXor
    android.support.v8.renderscript.Script$KernelID getKernelIDXor() -> getKernelIDXor
    void forEachMultiply(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachMultiply
    android.support.v8.renderscript.Script$KernelID getKernelIDMultiply() -> getKernelIDMultiply
    void forEachAdd(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachAdd
    android.support.v8.renderscript.Script$KernelID getKernelIDAdd() -> getKernelIDAdd
    void forEachSubtract(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachSubtract
    android.support.v8.renderscript.Script$KernelID getKernelIDSubtract() -> getKernelIDSubtract
android.support.v8.renderscript.ScriptIntrinsicBlendThunker -> android.support.v8.renderscript.ScriptIntrinsicBlendThunker:
    android.renderscript.ScriptIntrinsicBlend mN -> mN
    android.renderscript.ScriptIntrinsicBlend getNObj() -> getNObj
    android.support.v8.renderscript.ScriptIntrinsicBlendThunker create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void forEachClear(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachClear
    android.support.v8.renderscript.Script$KernelID getKernelIDClear() -> getKernelIDClear
    void forEachSrc(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachSrc
    android.support.v8.renderscript.Script$KernelID getKernelIDSrc() -> getKernelIDSrc
    void forEachDst(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachDst
    android.support.v8.renderscript.Script$KernelID getKernelIDDst() -> getKernelIDDst
    void forEachSrcOver(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachSrcOver
    android.support.v8.renderscript.Script$KernelID getKernelIDSrcOver() -> getKernelIDSrcOver
    void forEachDstOver(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachDstOver
    android.support.v8.renderscript.Script$KernelID getKernelIDDstOver() -> getKernelIDDstOver
    void forEachSrcIn(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachSrcIn
    android.support.v8.renderscript.Script$KernelID getKernelIDSrcIn() -> getKernelIDSrcIn
    void forEachDstIn(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachDstIn
    android.support.v8.renderscript.Script$KernelID getKernelIDDstIn() -> getKernelIDDstIn
    void forEachSrcOut(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachSrcOut
    android.support.v8.renderscript.Script$KernelID getKernelIDSrcOut() -> getKernelIDSrcOut
    void forEachDstOut(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachDstOut
    android.support.v8.renderscript.Script$KernelID getKernelIDDstOut() -> getKernelIDDstOut
    void forEachSrcAtop(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachSrcAtop
    android.support.v8.renderscript.Script$KernelID getKernelIDSrcAtop() -> getKernelIDSrcAtop
    void forEachDstAtop(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachDstAtop
    android.support.v8.renderscript.Script$KernelID getKernelIDDstAtop() -> getKernelIDDstAtop
    void forEachXor(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachXor
    android.support.v8.renderscript.Script$KernelID getKernelIDXor() -> getKernelIDXor
    void forEachMultiply(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachMultiply
    android.support.v8.renderscript.Script$KernelID getKernelIDMultiply() -> getKernelIDMultiply
    void forEachAdd(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachAdd
    android.support.v8.renderscript.Script$KernelID getKernelIDAdd() -> getKernelIDAdd
    void forEachSubtract(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEachSubtract
    android.support.v8.renderscript.Script$KernelID getKernelIDSubtract() -> getKernelIDSubtract
    android.renderscript.Script getNObj() -> getNObj
    android.renderscript.BaseObj getNObj() -> getNObj
android.support.v8.renderscript.ScriptIntrinsicBlur -> android.support.v8.renderscript.ScriptIntrinsicBlur:
    float[] mValues -> mValues
    android.support.v8.renderscript.Allocation mInput -> mInput
    android.support.v8.renderscript.ScriptIntrinsicBlur create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setInput(android.support.v8.renderscript.Allocation) -> setInput
    void setRadius(float) -> setRadius
    void forEach(android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
    android.support.v8.renderscript.Script$FieldID getFieldID_Input() -> getFieldID_Input
android.support.v8.renderscript.ScriptIntrinsicBlurThunker -> android.support.v8.renderscript.ScriptIntrinsicBlurThunker:
    android.renderscript.ScriptIntrinsicBlur mN -> mN
    android.renderscript.ScriptIntrinsicBlur getNObj() -> getNObj
    android.support.v8.renderscript.ScriptIntrinsicBlurThunker create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setInput(android.support.v8.renderscript.Allocation) -> setInput
    void setRadius(float) -> setRadius
    void forEach(android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
    android.support.v8.renderscript.Script$FieldID getFieldID_Input() -> getFieldID_Input
    android.renderscript.Script getNObj() -> getNObj
    android.renderscript.BaseObj getNObj() -> getNObj
android.support.v8.renderscript.ScriptIntrinsicColorMatrix -> android.support.v8.renderscript.ScriptIntrinsicColorMatrix:
    android.support.v8.renderscript.Matrix4f mMatrix -> mMatrix
    android.support.v8.renderscript.Allocation mInput -> mInput
    android.support.v8.renderscript.ScriptIntrinsicColorMatrix create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setMatrix() -> setMatrix
    void setColorMatrix(android.support.v8.renderscript.Matrix4f) -> setColorMatrix
    void setColorMatrix(android.support.v8.renderscript.Matrix3f) -> setColorMatrix
    void setGreyscale() -> setGreyscale
    void setYUVtoRGB() -> setYUVtoRGB
    void setRGBtoYUV() -> setRGBtoYUV
    void forEach(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
android.support.v8.renderscript.ScriptIntrinsicColorMatrixThunker -> android.support.v8.renderscript.ScriptIntrinsicColorMatrixThunker:
    android.renderscript.ScriptIntrinsicColorMatrix mN -> mN
    android.renderscript.ScriptIntrinsicColorMatrix getNObj() -> getNObj
    android.support.v8.renderscript.ScriptIntrinsicColorMatrixThunker create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setColorMatrix(android.support.v8.renderscript.Matrix4f) -> setColorMatrix
    void setColorMatrix(android.support.v8.renderscript.Matrix3f) -> setColorMatrix
    void setGreyscale() -> setGreyscale
    void setYUVtoRGB() -> setYUVtoRGB
    void setRGBtoYUV() -> setRGBtoYUV
    void forEach(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
    android.renderscript.Script getNObj() -> getNObj
    android.renderscript.BaseObj getNObj() -> getNObj
android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 -> android.support.v8.renderscript.ScriptIntrinsicConvolve3x3:
    float[] mValues -> mValues
    android.support.v8.renderscript.Allocation mInput -> mInput
    android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setInput(android.support.v8.renderscript.Allocation) -> setInput
    void setCoefficients(float[]) -> setCoefficients
    void forEach(android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
    android.support.v8.renderscript.Script$FieldID getFieldID_Input() -> getFieldID_Input
android.support.v8.renderscript.ScriptIntrinsicConvolve3x3Thunker -> android.support.v8.renderscript.ScriptIntrinsicConvolve3x3Thunker:
    android.renderscript.ScriptIntrinsicConvolve3x3 mN -> mN
    android.renderscript.ScriptIntrinsicConvolve3x3 getNObj() -> getNObj
    android.support.v8.renderscript.ScriptIntrinsicConvolve3x3Thunker create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setInput(android.support.v8.renderscript.Allocation) -> setInput
    void setCoefficients(float[]) -> setCoefficients
    void forEach(android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
    android.support.v8.renderscript.Script$FieldID getFieldID_Input() -> getFieldID_Input
    android.renderscript.Script getNObj() -> getNObj
    android.renderscript.BaseObj getNObj() -> getNObj
android.support.v8.renderscript.ScriptIntrinsicConvolve5x5 -> android.support.v8.renderscript.ScriptIntrinsicConvolve5x5:
    float[] mValues -> mValues
    android.support.v8.renderscript.Allocation mInput -> mInput
    android.support.v8.renderscript.ScriptIntrinsicConvolve5x5 create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setInput(android.support.v8.renderscript.Allocation) -> setInput
    void setCoefficients(float[]) -> setCoefficients
    void forEach(android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
    android.support.v8.renderscript.Script$FieldID getFieldID_Input() -> getFieldID_Input
android.support.v8.renderscript.ScriptIntrinsicConvolve5x5Thunker -> android.support.v8.renderscript.ScriptIntrinsicConvolve5x5Thunker:
    android.renderscript.ScriptIntrinsicConvolve5x5 mN -> mN
    android.renderscript.ScriptIntrinsicConvolve5x5 getNObj() -> getNObj
    android.support.v8.renderscript.ScriptIntrinsicConvolve5x5Thunker create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setInput(android.support.v8.renderscript.Allocation) -> setInput
    void setCoefficients(float[]) -> setCoefficients
    void forEach(android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
    android.support.v8.renderscript.Script$FieldID getFieldID_Input() -> getFieldID_Input
    android.renderscript.Script getNObj() -> getNObj
    android.renderscript.BaseObj getNObj() -> getNObj
android.support.v8.renderscript.ScriptIntrinsicLUT -> android.support.v8.renderscript.ScriptIntrinsicLUT:
    android.support.v8.renderscript.Matrix4f mMatrix -> mMatrix
    android.support.v8.renderscript.Allocation mTables -> mTables
    byte[] mCache -> mCache
    boolean mDirty -> mDirty
    android.support.v8.renderscript.ScriptIntrinsicLUT create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void validate(int,int) -> validate
    void setRed(int,int) -> setRed
    void setGreen(int,int) -> setGreen
    void setBlue(int,int) -> setBlue
    void setAlpha(int,int) -> setAlpha
    void forEach(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
android.support.v8.renderscript.ScriptIntrinsicLUTThunker -> android.support.v8.renderscript.ScriptIntrinsicLUTThunker:
    android.renderscript.ScriptIntrinsicLUT mN -> mN
    android.renderscript.ScriptIntrinsicLUT getNObj() -> getNObj
    android.support.v8.renderscript.ScriptIntrinsicLUTThunker create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setRed(int,int) -> setRed
    void setGreen(int,int) -> setGreen
    void setBlue(int,int) -> setBlue
    void setAlpha(int,int) -> setAlpha
    void forEach(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
    android.renderscript.Script getNObj() -> getNObj
    android.renderscript.BaseObj getNObj() -> getNObj
android.support.v8.renderscript.ScriptIntrinsicYuvToRGB -> android.support.v8.renderscript.ScriptIntrinsicYuvToRGB:
    android.support.v8.renderscript.Allocation mInput -> mInput
    android.support.v8.renderscript.ScriptIntrinsicYuvToRGB create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setInput(android.support.v8.renderscript.Allocation) -> setInput
    void forEach(android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
    android.support.v8.renderscript.Script$FieldID getFieldID_Input() -> getFieldID_Input
android.support.v8.renderscript.ScriptIntrinsicYuvToRGBThunker -> android.support.v8.renderscript.ScriptIntrinsicYuvToRGBThunker:
    android.renderscript.ScriptIntrinsicYuvToRGB mN -> mN
    android.renderscript.ScriptIntrinsicYuvToRGB getNObj() -> getNObj
    android.support.v8.renderscript.ScriptIntrinsicYuvToRGBThunker create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element) -> create
    void setInput(android.support.v8.renderscript.Allocation) -> setInput
    void forEach(android.support.v8.renderscript.Allocation) -> forEach
    android.support.v8.renderscript.Script$KernelID getKernelID() -> getKernelID
    android.support.v8.renderscript.Script$FieldID getFieldID_Input() -> getFieldID_Input
    android.renderscript.Script getNObj() -> getNObj
    android.renderscript.BaseObj getNObj() -> getNObj
android.support.v8.renderscript.Short2 -> android.support.v8.renderscript.Short2:
    short x -> x
    short y -> y
android.support.v8.renderscript.Short3 -> android.support.v8.renderscript.Short3:
    short x -> x
    short y -> y
    short z -> z
android.support.v8.renderscript.Short4 -> android.support.v8.renderscript.Short4:
    short x -> x
    short y -> y
    short z -> z
    short w -> w
android.support.v8.renderscript.Type -> android.support.v8.renderscript.Type:
    int mDimX -> mDimX
    int mDimY -> mDimY
    int mDimZ -> mDimZ
    boolean mDimMipmaps -> mDimMipmaps
    boolean mDimFaces -> mDimFaces
    int mDimYuv -> mDimYuv
    int mElementCount -> mElementCount
    android.support.v8.renderscript.Element mElement -> mElement
    android.support.v8.renderscript.Element getElement() -> getElement
    int getX() -> getX
    int getY() -> getY
    int getZ() -> getZ
    int getYuv() -> getYuv
    boolean hasMipmaps() -> hasMipmaps
    boolean hasFaces() -> hasFaces
    int getCount() -> getCount
    void calcElementCount() -> calcElementCount
android.support.v8.renderscript.Type$Builder -> android.support.v8.renderscript.Type$Builder:
    android.support.v8.renderscript.RenderScript mRS -> mRS
    int mDimX -> mDimX
    int mDimY -> mDimY
    int mDimZ -> mDimZ
    boolean mDimMipmaps -> mDimMipmaps
    boolean mDimFaces -> mDimFaces
    int mYuv -> mYuv
    android.support.v8.renderscript.Element mElement -> mElement
    android.support.v8.renderscript.Type$Builder setX(int) -> setX
    android.support.v8.renderscript.Type$Builder setY(int) -> setY
    android.support.v8.renderscript.Type$Builder setZ(int) -> setZ
    android.support.v8.renderscript.Type$Builder setMipmaps(boolean) -> setMipmaps
    android.support.v8.renderscript.Type$Builder setFaces(boolean) -> setFaces
    android.support.v8.renderscript.Type$Builder setYuvFormat(int) -> setYuvFormat
    android.support.v8.renderscript.Type create() -> create
android.support.v8.renderscript.Type$CubemapFace -> android.support.v8.renderscript.Type$CubemapFace:
    android.support.v8.renderscript.Type$CubemapFace POSITIVE_X -> POSITIVE_X
    android.support.v8.renderscript.Type$CubemapFace NEGATIVE_X -> NEGATIVE_X
    android.support.v8.renderscript.Type$CubemapFace POSITIVE_Y -> POSITIVE_Y
    android.support.v8.renderscript.Type$CubemapFace NEGATIVE_Y -> NEGATIVE_Y
    android.support.v8.renderscript.Type$CubemapFace POSITIVE_Z -> POSITIVE_Z
    android.support.v8.renderscript.Type$CubemapFace NEGATIVE_Z -> NEGATIVE_Z
    int mID -> mID
    android.support.v8.renderscript.Type$CubemapFace[] $VALUES -> $VALUES
    android.support.v8.renderscript.Type$CubemapFace[] values() -> values
    android.support.v8.renderscript.Type$CubemapFace valueOf(java.lang.String) -> valueOf
android.support.v8.renderscript.TypeThunker -> android.support.v8.renderscript.TypeThunker:
    android.renderscript.Type mN -> mN
    java.util.HashMap mMap -> mMap
    android.renderscript.Type getNObj() -> getNObj
    void internalCalc() -> internalCalc
    android.support.v8.renderscript.Type find(android.renderscript.Type) -> find
    android.support.v8.renderscript.Type create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element,int,int,int,boolean,boolean,int) -> create
    android.renderscript.BaseObj getNObj() -> getNObj
com.grendell.renderwatch.ScriptC_watch -> com.grendell.renderwatch.a:
    android.support.v8.renderscript.Element __I32 -> a
    android.support.v8.renderscript.Element __I32_2 -> b
    android.support.v8.renderscript.Element __U32 -> c
    android.support.v8.renderscript.Int2 mExportVar_gCenter -> d
    android.support.v8.renderscript.Int2 mExportVar_gHourHandEndpoint -> e
    int mExportVar_gHourHandWidthSqr -> f
    android.support.v8.renderscript.Int2 mExportVar_gMinuteHandEndpoint -> g
    int mExportVar_gMinuteHandWidthSqr -> h
    android.support.v8.renderscript.Int2 mExportVar_gSecondHandEndpoint -> i
    int mExportVar_gSecondHandWidthSqr -> j
    void set_gCenter(android.support.v8.renderscript.Int2) -> a
    void set_gHourHandEndpoint(android.support.v8.renderscript.Int2) -> b
    void set_gHourHandWidthSqr(int) -> a
    void set_gMinuteHandEndpoint(android.support.v8.renderscript.Int2) -> c
    void set_gMinuteHandWidthSqr(int) -> b
    void set_gSecondHandEndpoint(android.support.v8.renderscript.Int2) -> d
    void set_gSecondHandWidthSqr(int) -> c
    void forEach_render(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation) -> a
    void forEach_render(android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Script$LaunchOptions) -> a
com.grendell.renderwatch.activity.WatchActivity -> com.grendell.renderwatch.activity.WatchActivity:
    com.grendell.renderwatch.view.RenderWatchView mRenderWatchView -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
com.grendell.renderwatch.view.RenderWatchView -> com.grendell.renderwatch.view.RenderWatchView:
    int[] mPixelBuffer -> a
    android.support.v8.renderscript.RenderScript mRS -> b
    com.grendell.renderwatch.ScriptC_watch mScript -> c
    android.support.v8.renderscript.Allocation mPixelAlloc -> d
    android.support.v8.renderscript.Int2 mCenter -> e
    android.support.v8.renderscript.Int2 mHourHandEndpoint -> f
    android.support.v8.renderscript.Int2 mMinuteHandEndpoint -> g
    android.support.v8.renderscript.Int2 mSecondHandEndpoint -> h
    boolean mIsActive -> i
    android.os.AsyncTask mRenderTask -> j
    java.lang.Runnable mRenderRunnable -> k
    void init(android.content.Context) -> a
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    void onPause() -> a
    void onResume() -> b
    boolean access$0(com.grendell.renderwatch.view.RenderWatchView) -> a
    android.os.AsyncTask access$1(com.grendell.renderwatch.view.RenderWatchView) -> b
    android.support.v8.renderscript.Int2 access$2(com.grendell.renderwatch.view.RenderWatchView) -> c
    android.support.v8.renderscript.Int2 access$3(com.grendell.renderwatch.view.RenderWatchView) -> d
    android.support.v8.renderscript.Int2 access$4(com.grendell.renderwatch.view.RenderWatchView) -> e
    android.support.v8.renderscript.Int2 access$5(com.grendell.renderwatch.view.RenderWatchView) -> f
    com.grendell.renderwatch.ScriptC_watch access$6(com.grendell.renderwatch.view.RenderWatchView) -> g
    android.support.v8.renderscript.Allocation access$7(com.grendell.renderwatch.view.RenderWatchView) -> h
    int[] access$8(com.grendell.renderwatch.view.RenderWatchView) -> i
    void access$9(com.grendell.renderwatch.view.RenderWatchView,android.os.AsyncTask) -> a
    java.lang.Runnable access$10(com.grendell.renderwatch.view.RenderWatchView) -> j
com.grendell.renderwatch.view.RenderWatchView$1 -> com.grendell.renderwatch.view.a:
    com.grendell.renderwatch.view.RenderWatchView this$0 -> a
    void run() -> run
    com.grendell.renderwatch.view.RenderWatchView access$0(com.grendell.renderwatch.view.RenderWatchView$1) -> a
com.grendell.renderwatch.view.RenderWatchView$1$1 -> com.grendell.renderwatch.view.b:
    long mRenderStart -> b
    com.grendell.renderwatch.view.RenderWatchView$1 this$1 -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
